#+TITLE: =Emacs configuration=
#+PROPERTY: header-args:elisp :tangle /home/haider/.emacs.d/init.el
#+AUTHOR: Haider Mirza

* Table of contents :toc:
- [[#note][Note]]
  - [[#replace-capslock-with-ctrl][Replace Capslock with CTRL]]
- [[#tweak-garbage-collector][Tweak Garbage Collector]]
- [[#package-system-setup][Package System Setup]]
  - [[#use-package][use-package]]
  - [[#straightel][straight.el]]
  - [[#automatic-package-updates][Automatic Package Updates]]
- [[#startup-performance][Startup Performance]]
- [[#keybinding-configuration][Keybinding Configuration]]
  - [[#general][General]]
  - [[#evil-mode][Evil Mode]]
  - [[#evil-collection][Evil Collection]]
- [[#ui-configuration][UI Configuration]]
  - [[#font][Font]]
  - [[#haider-theme][Haider Theme]]
  - [[#load-theme][Load Theme]]
  - [[#dashboard][Dashboard]]
  - [[#minimal-visuals][Minimal Visuals]]
  - [[#center-documents][Center Documents]]
  - [[#vertico][Vertico]]
  - [[#marginalia][Marginalia]]
  - [[#frame-transparency-and-maximize-windows][frame transparency and maximize windows.]]
  - [[#scrolling][Scrolling]]
  - [[#line-numbers][Line numbers]]
  - [[#modeline][Modeline]]
- [[#general-configuration][General Configuration]]
  - [[#sustom-variables][Sustom variables]]
  - [[#save-place-mode][Save-place mode]]
  - [[#auto-revert-buffers][Auto Revert buffers]]
  - [[#which-key][Which key]]
  - [[#buffers][Buffers]]
  - [[#windows][Windows]]
  - [[#file-control][File control]]
  - [[#recentf][Recentf]]
  - [[#interactions][Interactions]]
  - [[#counsel][Counsel]]
  - [[#helpful][Helpful]]
  - [[#hydra][Hydra]]
- [[#keep-directories-clean][Keep Directories Clean]]
- [[#editing-files-configuration][Editing Files Configuration]]
  - [[#flyspell][Flyspell]]
  - [[#swiper][Swiper]]
  - [[#comment-lines][Comment Lines]]
  - [[#org][Org]]
- [[#chatting-configuration][Chatting Configuration]]
  - [[#erc][ERC]]
  - [[#emojify][Emojify]]
- [[#keybinds-to-open-files][Keybinds to open files]]
  - [[#open-documents][Open Documents]]
  - [[#open-configs][Open Configs]]
- [[#mu4e-email-configuration][MU4E EMail Configuration]]
  - [[#mu4e][Mu4e]]
  - [[#mu4e-alert][Mu4e-Alert]]
  - [[#org-mime][Org-mime]]
- [[#development-configuration][Development Configuration]]
  - [[#yasnippet][YASnippet]]
  - [[#magit][Magit]]
  - [[#lsp-mode][Lsp-mode]]
  - [[#eglot][Eglot]]
  - [[#languages][Languages]]
  - [[#smart-parens][Smart Parens]]
  - [[#company-mode][Company mode]]
  - [[#compilation][Compilation]]
  - [[#flycheck][Flycheck]]
  - [[#tree][Tree]]
- [[#terminal-configurations][Terminal Configurations]]
  - [[#vterm][VTerm]]
  - [[#vterm-toggle][VTerm-toggle]]
  - [[#eshell][Eshell]]
- [[#password-managment][Password Managment]]
- [[#emacs-server-mode][Emacs server-mode]]
- [[#load-desktoporg][Load Desktop.org]]
- [[#garbage-collecter-hack][Garbage Collecter Hack]]

* Note
** Replace Capslock with CTRL
   You dont have to but I have replaced CapsLock with CTRL (On my system. Not on Emacs)
   Most people don’t use the CapsLock key (unless you like YELLING ON THE INTERNET)
   So you can use this simple fix to replace it with the CTRL to make your Emacs life easier.
   Doing this will prevent you from having to bend your pinky down all day long to hit all those fabled Emacs keybindings,
   allowing you to keep your hands on the home row of the keyboard.

   There are many ways to accomplish this in Linux, but the easiest (and most repeatable) I’ve found is to use xmodmap.
   First, make sure you have it xmodmap installed.
   Then, create a file named .Xmodmap in your home folder and populate it like so:

   #+BEGIN_SRC
   clear lock
   clear control
   keycode 66 = Control_L
   add control = Control_L
   add Lock = Control_R
   #+end_src

   This replaces CapsLock with control and also replaces the Ctrl key on the right side with CapsLock just in case you ever need to use it.
   Most login systems (GDM, KDM, etc) will load this file when you log in so you might not need to do anything extra for it to take effect, just log out and log back in again.
   If that doesn’t seem to work, you can add this line to one of your startup files (.xinitrc, .profile, window manager configuration, etc):
   (I have already enabled this in my EXWM config (desktop.org))
   #+BEGIN_SRC
   xmodmap ~/.Xmodmap
   #+end_src
* Tweak Garbage Collector
  This variable will set to normal at the end of my config.
  #+BEGIN_SRC elisp
    ;; The default is 800 kilobytes.  Measured in bytes.
    (setq gc-cons-threshold (* 50 1000 1000))

  #+END_SRC
* Package System Setup
  Emacs has a built in package manager but it doesn’t make it easy to automatically install packages on a new system the first time you pull down your configuration.
  use-package is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.
** use-package
 #+begin_src elisp

   ;; Initialize package sources
   (require 'package)

   (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                            ("melpa-stable" . "https://stable.melpa.org/packages/")
                            ("org" . "https://orgmode.org/elpa/")
                            ("elpa" . "https://elpa.gnu.org/packages/")))

   (package-initialize)
   (unless package-archive-contents
     (package-refresh-contents))

   ;; Initialize use-package on non-Linux platforms
   (unless (package-installed-p 'use-package)
     (package-install 'use-package))

   (require 'use-package)
   (setq use-package-always-ensure t)

 #+end_src
** straight.el
#+BEGIN_SRC elisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

#+END_SRC
** Automatic Package Updates
The auto-package-update package helps us keep our Emacs packages up to date!
It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.
You can also use M-x auto-package-update-now to update right now!
#+BEGIN_SRC elisp

  (use-package auto-package-update
    :defer 10)

#+END_SRC
* Startup Performance
  Find out how long it had taken to load Emacs.
#+BEGIN_SRC elisp
  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
	     (format "%.2f seconds"
		     (float-time
		     (time-subtract after-init-time before-init-time)))
	     gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)

#+END_SRC
* Keybinding Configuration
** General
  
#+begin_src elisp
  (use-package general
    :after evil
    :config
    (general-create-definer rune/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (rune/leader-keys
      "SPC" '(find-file :which-key "find file")))

#+end_src

** Evil Mode
  C-j for return
  C-i for tab
#+begin_src elisp

  (use-package undo-tree)
  (setq undo-tree-auto-save-history nil)
  (global-undo-tree-mode 1)

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-respect-visual-line-mode t)
    (setq evil-undo-system 'undo-tree)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (evil-mode 1)

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Evil Collection

#+begin_src elisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

* UI Configuration
** Font
   Make sure "font-fira-code" is installed on your system.
   The name may be different depending on your Operating System.
#+begin_src elisp

    ;; You will most likely need to adjust this font size for your system!
    (defvar runemacs/default-font-size 80)

    (set-face-attribute 'default nil :font "Fira Code Retina" :height runemacs/default-font-size)

#+end_src
** Haider Theme
I had used this before I switched back to doom-one
 #+BEGIN_SRC elisp :tangle "/home/haider/.emacs.d/haider-theme.el"
   (require 'autothemer)

   (autothemer-deftheme
    haider "This is a very dark custom emacs theme that is easily modifiable as it is made with autothemer"

    ((((class color) (min-colors #xFFFFFF))) ;; I'm only concerned with graphical Emacs

     ;; Define our color palette
     (haider-black      "#080D0D")
     (haider-grey       "#151A1C")
     (haider-white      "#ffffff")
     (haider-yellow     "#ECDA23")
     (haider-red        "red1")
     (haider-orange     "orange1")
     (haider-dk-orange  "#eb6123")
     (haider-blue       "#2986cc")
     (haider-green      "LightGreen")
     (haider-pink       "pink")
     (haider-purple     "purple")
     (haider-dk-green   "#227722")
     (haider-region     "#20353B")
     (haider-code-bg    "#15181C"))

    ;; Customize faces
    ((default                   (:foreground haider-white :background haider-black))
     (cursor                    (:background haider-dk-orange))
     (region                    (:background haider-region))
     (mode-line                 (:background haider-grey))
     (font-lock-constant-face   (:foreground haider-pink))
     (font-lock-string-face     (:foreground haider-orange))
     (font-lock-keyword-face    (:foreground haider-blue))
     (font-lock-builtin-face    (:foreground haider-yellow))

     ;; Comments
     (font-lock-comment-delimiter-face    (:foreground haider-green))
     (font-lock-comment-face              (:foreground haider-green))

     ;; Org Block
     (org-block (:background haider-code-bg))


     (org-block-end-line         (:backround haider-grey :inherit 'org-block-begin-line))
     (org-block-begin-line       (:backround haider-grey :foreground haider-dk-green :inherit 'org-block))
     (org-code                   (:backround haider-grey :foreground haider-dk-orange :inherit 'org-block))

     ;; Org Levels
     (org-level-1               (:foreground haider-red))
     (org-level-2               (:foreground haider-orange))
     (org-level-3               (:foreground haider-yellow))
     (org-level-4               (:foreground haider-green))
     (org-level-5               (:foreground haider-blue))
     (org-level-6               (:foreground haider-pink))
     (org-level-7               (:foreground haider-purple))
  
     (dashboard-text-banner     (:foreground haider-red))))

   (provide-theme 'haider)
 #+END_SRC
** Load Theme
   Note That I use my own custom theme
#+begin_src elisp
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t))

    (rune/leader-keys
      "st" '(counsel-load-theme :which-key "choose theme"))
#+end_src

** Dashboard
*** Text Banner
    Very cool banner I had generated in [[https://textfancy.com/multiline-text-art/][this]] website. 
#+BEGIN_SRC elisp
(setq title
"                        ▄▄         ▄▄                                      ▄▄                          
▀████▀  ▀████▀▀         ██       ▀███                     ▀████▄     ▄███▀ ██                          
  ██      ██                       ██                       ████    ████                               
  ██      ██   ▄█▀██▄ ▀███    ▄█▀▀███   ▄▄█▀██▀███▄███      █ ██   ▄█ ██ ▀███ ▀███▄███ █▀▀▀███ ▄█▀██▄  
  ██████████  ██   ██   ██  ▄██    ██  ▄█▀   ██ ██▀ ▀▀      █  ██  █▀ ██   ██   ██▀ ▀▀ ▀  ███ ██   ██  
  ██      ██   ▄█████   ██  ███    ██  ██▀▀▀▀▀▀ ██          █  ██▄█▀  ██   ██   ██       ███   ▄█████  
  ██      ██  ██   ██   ██  ▀██    ██  ██▄    ▄ ██          █  ▀██▀   ██   ██   ██      ███  ▄██   ██  
▄████▄  ▄████▄▄████▀██▄████▄ ▀████▀███▄ ▀█████▀████▄      ▄███▄ ▀▀  ▄████▄████▄████▄   ███████▀████▀██▄")
                                                                                                       
#+END_SRC
*** Emacs config
 #+BEGIN_SRC elisp
   (setq initial-scratch-message (concat title "\n\nWelcome to Emacs,\n\nMake sure to launch xmodmap: (exwm/run-xmodmap)\nAlso make sure to check Org-Agenda and Org-Roam"))

      ;; (use-package dashboard
      ;;   :config
      ;;   (setq dashboard-banner-logo-title "Welcome to Haider's System")
      ;;   (setq dashboard-startup-banner "/home/haider/.emacs.d/banner.txt")
      ;;   ;; (setq dashboard-center-content t)
      ;;   (setq dashboard-init-info "Make sure to check Org Agenda")
      ;;   (setq dashboard-show-shortcuts nil)
      ;;   (setq dashboard-set-heading-icons t)
      ;;   (setq dashboard-set-file-icons t)
      ;;   (setq dashboard-items '((recents  . 5)
      ;; 			  (projects . 5)
      ;; 			  (agenda . 5)))
      ;;   (dashboard-setup-startup-hook))

 #+END_SRC
** Minimal Visuals
Make the User interface more minimal.
#+begin_src elisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)          ; Disable the menu bar

  ;; Disable this anoyying visible bell
  (setq visible-bell nil)

#+end_src

** Center Documents
Center org-mode documents.

#+begin_src elisp
  (defun org/org-mode-visual-fill ()
    (setq visual-fill-column-width 180
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . org/org-mode-visual-fill))

#+end_src
** Vertico
 #+BEGIN_SRC elisp

   (use-package vertico
     :bind (:map vertico-map
		 ("C-j" . vertico-next)
		 ("C-k" . vertico-previous)
		 ("C-f" . vertico-exit)
		 :map minibuffer-local-map
		 ("M-h" . backward-kill-word))
     :custom
     (vertico-cycle t)
     :init
     (vertico-mode))

   ;; Persist history over Emacs restarts. Vertico sorts by history position.
   (use-package savehist
     :after vertico
     :config
     (savehist-mode))

 #+END_SRC 
** Marginalia
#+BEGIN_SRC elisp
  (use-package marginalia
    :after vertico
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))

#+END_SRC
** frame transparency and maximize windows. 
#+BEGIN_SRC elisp

  ;;(set-frame-parameter (selected-frame) 'alpha '(70 . 70))
  ;;(add-to-list 'default-frame-alist '(alpha . (70 . 70)))

  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

#+END_SRC
** Scrolling
Improve scrolling.
#+begin_src elisp
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
  (setq use-dialog-box nil) ;; Disable dialog boxes since they weren't working in Mac OSX

#+end_src

** Line numbers
#+begin_src elisp

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  vterm-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Modeline

#+begin_src elisp

  ;; (use-package simple-modeline
  ;;   :hook (after-init . simple-modeline-mode))

  (use-package all-the-icons)

  (use-package all-the-icons-completion
    :config
    (all-the-icons-completion-mode))

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom (doom-modeline-height 17)
    :config 
    (setq doom-modeline-lsp t
	  doom-modeline-buffer-encoding nil
	  doom-modeline-github nil
	  doom-modeline-project-detection 'auto
	  doom-modeline-number-limit 99
	  doom-modeline-mu4e t
	  doom-modeline-irc t)

    ;; Show the time and date in modeline
    (setq display-time-day-and-date t)
    ;; Enable the time & date in the modeline
    (display-time-mode 1)
    (setq display-time-string-forms '((format-time-string "%H:%M" now)))
    ;; Format Date and time
    (setq display-time-format "%l:%M %p %b %y"
	  display-time-default-load-average nil))

#+end_src 
* General Configuration
** Sustom variables
Sometimes Emacs will add some variables or something to your init.el, to prevent this, we can move then to another file.
#+BEGIN_SRC elisp
  ;; Move customization variables to a separate file and load it
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)

#+END_SRC
** Save-place mode
#+BEGIN_SRC elisp
(save-place-mode 1)
#+END_SRC
** Auto Revert buffers
#+BEGIN_SRC elisp
  ;; Revert buffers when the underlying file has changed
  (global-auto-revert-mode 1)

#+END_SRC
*** Dired
This can also happen in Dired.
#+BEGIN_SRC elisp
  ;; Revert Dired and other buffers
  (setq global-auto-revert-non-file-buffers t)

#+END_SRC
** Which key
  
 #+begin_src elisp 
   (use-package which-key
     :defer 20
     :diminish which-key-mode
     :config
     (which-key-mode)
     (setq which-key-idle-delay 1))

 #+end_src
** Buffers
*** Perspective.el
I dont really want to use it for now.
#+BEGIN_SRC elisp
  ;; (use-package perspective
  ;;   :ensure t
  ;;   :init
  ;;   (persp-mode))

  ;; (rune/leader-keys
  ;;   "p"  '(:ignore t :which-key "Perspective")
  ;;   "ps" '(persp-switch :which-key "Switch perspective")
  ;;   "pn" '(persp-next :which-key "Switch to next perspective")
  ;;   "pp" '(persp-prev :which-key "Switch to previous perspective")
  ;;   "pa" '(persp-add-buffer :which-key "Add perspective")
  ;;   "pS" '(persp-set-buffer :which-key "Set perspective"))
#+END_SRC
*** Bufler
There is a org-roam note about this and possible errors: [[id:c2647c82-ae0a-4d26-aa62-706a6a8051d4][Bufler]] 
It is possibly my favourite way of buffer management.
#+BEGIN_SRC elisp
  (use-package bufler)

  (setf bufler-groups
	(bufler-defgroups
	  ;; Subgroup collecting all named workspaces.
	  (group (auto-workspace))
	  ;; Subgroup collecting buffers in a projectile project.
	  (group (auto-projectile))
	  ;; Grouping browser windows
	  (group
	   (group-or "Browsers"
		     (name-match "Qutebrowser" (rx bos "Qutebrowser"))
		     (name-match "Icecat" (rx bos "Icecat"))))
	  (group
	   ;; Subgroup collecting these "special special" buffers
	   ;; separately for convenience.
	   (name-match "**Special**"
		       (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace") "*")))
	  ;; Group remaining buffers by major mode.
	  (auto-mode)))

  (rune/leader-keys
    "p"  '(:ignore t :which-key "Bufler")
    "ps" '(bufler-switch-buffer :which-key "Bufler switch buffers"))
#+END_SRC
*** Keybinds
#+BEGIN_SRC elisp
  (rune/leader-keys
  "b"  '(:ignore t :which-key "Buffers")
  "bb" '(consult-buffer :which-key "Switch to buffer")
  "bB" '(consult-buffer-other-window :which-key "Switch to buffer on new window")
  "bF" '(consult-buffer-other-frame :which-key "Switch to buffer on new frame")
  "bk" '(kill-buffer :which-key "Kill a buffer")
  "bK" '(kill-buffer-and-window :which-key "Kill buffer and window")
  "bc" '(clone-indirect-buffer-other-window :which-key "Clone indirect buffer other window"))

#+END_SRC
** Windows
  #+BEGIN_SRC elisp
    (global-set-key (kbd "<s-left>") 'windmove-left)
    (global-set-key (kbd "<s-right>") 'windmove-right)
    (global-set-key (kbd "<s-up>") 'windmove-up)
    (global-set-key (kbd "<s-down>") 'windmove-down)

  #+END_SRC 
** File control
#+BEGIN_SRC elisp
  (rune/leader-keys
  "x"  '(:ignore t :which-key "Delete")
  "c"  '(:ignore t :which-key "Create")
  "xf" '(delete-file :which-key "Delete file")
  "xd" '(delete-directory :which-key "Delete directory")
  "cf" '(make-empty-file :which-key "Create empty file")
  "cf" '(make-directory :which-key "Create directory"))

#+END_SRC
** Recentf
 #+BEGIN_SRC elisp

   (recentf-mode 1)
   (setq recentf-max-menu-items 25)
   (setq recentf-max-saved-items 25)

   (run-at-time nil (* 5 60) 'recentf-save-list)

   (rune/leader-keys
     "t" '(counsel-recentf :which-key "Recent files"))

 #+END_SRC
** Interactions
  
 #+BEGIN_SRC elisp

   ;; When emacs asks for "yes" or "no", let "y" or "n" suffice
   (fset 'yes-or-no-p 'y-or-n-p)

   ;; Confirm to quit
   (setq confirm-kill-emacs 'yes-or-no-p)

   ;; Major mode of new buffers
   ;; (setq initial-major-mode 'org-mode)

 #+END_SRC
** Counsel
Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.
#+begin_src elisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only))

#+end_src

** Helpful
   Helpful adds a lot of very helpful (get it?) information to Emacs’ describe- command buffers.
   For example, if you use describe-function, you will not only get the documentation about the function,
   you will also see the source code of the function and where it gets used in other places in the Emacs configuration.
   It is very useful for figuring out how things work in Emacs.
 #+begin_src elisp
   (use-package helpful
     :custom
     (counsel-describe-function-function #'helpful-callable)
     (counsel-describe-variable-function #'helpful-variable)
     :bind
     ([remap describe-function] . counsel-describe-function)
     ([remap describe-command] . helpful-command)
     ([remap describe-variable] . counsel-describe-variable)
     ([remap describe-key] . helpful-key))

 #+end_src
** Hydra

 [[https://github.com/abo-abo/hydra#sample-hydras][Hydra's Github Page]]
 #+BEGIN_SRC elisp
   ;; (use-package hydra
   ;;   :defer t)

   ;;    ;; change the text's scale if required
   ;;    (defhydra hydra-zoom (global-map "<f6>")
   ;;      "zoom"
   ;;      ("g" text-scale-increase "in")
   ;;      ("l" text-scale-decrease "out"))

   ;;    ;; Window Management options
   ;;    (defhydra hydra-window (global-map "<f2>")
   ;;      "Window Management"
   ;;      ("q" delete-window "delete window")
   ;;      ("d" delete-other-windows "delete other windows")
   ;;      ("," shrink-window-horizontally "shrink window horizontally")
   ;;      ("." enlarge-window-horizontally "enlarge windows horizontally")
   ;;      ("b" balance-windows "balance windows"))

 #+END_SRC 
* Keep Directories Clean
  Makes Emacs keep my file directorys clean of unnecessary files.
#+BEGIN_SRC elisp
  (use-package no-littering)

  (setq backup-by-copying t)

  (setq delete-old-versions t
	kept-new-versions 6
	kept-old-versions 2
	version-control t)

  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
  ;; auto-save-mode doesn't create the path automatically!
  (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)

  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
	auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))

#+END_SRC

* Editing Files Configuration
** Flyspell
Unlike everyone, I cant spell properly so I added this small code that launched flyspell-mode when opening a org-mode document.
I have disabled it as it can be anoyying.
#+BEGIN_SRC elisp
  ;; (dolist (hook '(org-mode-hook))
  ;;   (add-hook hook (lambda () (flyspell-mode 1))))
#+END_SRC
** Swiper
   #+BEGIN_SRC elisp
  (global-set-key (kbd "C-s-s") 'swiper)
   #+END_SRC
** Comment Lines
#+BEGIN_SRC elisp
  (rune/leader-keys
  "TAB" '(comment-dwim :which-key "comment lines"))
#+END_SRC
** Org

   Here consists configs for:
   - Org Mode
   - Org Agenda
   - Org Roam
   - Org pandoc
   - Org reveal
   - Org superstar
   - Org appear
     
*** OrgMode Main config
  #+begin_src elisp
    (use-package prettier)
    
    (rune/leader-keys
      "o"  '(:ignore t :which-key "Org")
      "oa" '(org-agenda :which-key "View Org-Agenda")
      "oT" '(org-time-stamp-inactive :which-key "Org Timestamp")
      "ol" '(org-agenda-list :which-key "View Org-Agendalist")
      "oL" '(org-insert-link :which-key "View Org-Agendalist")
      "ot" '(org-babel-tangle :which-key "Tangle Document")
      "ox" '(org-export-dispatch :which-key "Export Document")
      "od" '(org-deadline :which-key "Deadline")
      "os" '(org-schedule :which-key "Scedule")
      "oS" '(org-todo :which-key "OrgMode states"))

    (defun org/org-font-setup ()
      ;; Replace list hyphen with dot
      (font-lock-add-keywords 'org-mode
			      '(("^ *\\([-]\\) "
				 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

      ;; Set faces for heading levels
      (dolist (face '((org-level-1 . 1.2)
		      (org-level-2 . 1.1)
		      (org-level-3 . 1.05)
		      (org-level-4 . 1.0)
		      (org-level-5 . 1.1)
		      (org-level-6 . 1.1)
		      (org-level-7 . 1.1)
		      (org-level-8 . 1.1)))
	(set-face-attribute (car face) nil :weight 'regular :height (cdr face)))

      ;; Ensure that anything that should be fixed-pitch in Org files appears that way
      (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

    (use-package org
      :config
      (setq org-ellipsis " ▾")

      (setq org-agenda-start-with-log-mode t)
      (setq org-log-done 'time)
      (setq org-log-into-drawer t)

      (setq org-src-fontify-natively t) ;; Syntax highlighting in org src blocks
      (setq org-startup-folded t) ;; Org files start up folded by default
      (setq org-image-actual-width nil)

      (setq org-list-demote-modify-bullet
      '(("+" . "*") ("*" . "-") ("-" . "+")))

      (setq org-agenda-files
	    '("~/Documents/Home/Reminders.org"
	      "~/Documents/Home/TODO.org"
	      "~/Documents/School/Homework.org"
	      "~/Documents/School/School-Reminders.org"))

      (setq org-todo-keywords
	    '((sequence
	       "TODO(t)"
	       "WORK(w)"
	       "DEV(d)"
	       "RESEARCH(r)"
	       "HOLD(h)"
	       "PLAN(p)"
	       "|"
	       "COMPLETED(c)"
	       "FAILED(f)")))

      ;; Save Org buffers after refiling!
      (advice-add 'org-refile :after 'org-save-all-org-buffers)

      (org/org-font-setup))

    (use-package org-bullets
      :after org
      :hook 
      (org-mode . org-bullets-mode)
      :custom
      (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

    (add-hook 'org-mode-hook 'org-toggle-pretty-entities)
    (add-hook 'org-mode-hook 'toc-org-mode)

  #+END_SRC
*** ox-pandoc
    Expand org-mode's exporting capabilities
    Make sure the pandoc is installed on your system.
 #+BEGIN_SRC elisp
    (use-package ox-pandoc)
 #+END_SRC
*** org-appear
 #+BEGIN_SRC elisp
(use-package org-appear
  :commands (org-appear-mode)
  :hook (org-mode . org-appear-mode)
  :init
  (setq org-hide-emphasis-markers t) ;; A default setting that needs to be t for org-appear

  (setq org-appear-autoemphasis t)  ;; Enable org-appear on emphasis (bold, italics, etc)
  (setq org-appear-autolinks t) ;; Enable on links
  (setq org-appear-autosubmarkers t)) ;; Enable on subscript and superscript
 #+END_SRC
*** ox-reveal
Export Orgmode to presentations.
This Emacs file has been installed by Guix.
Here is my configuration; Place this at the top of your OrgMode document then export with *org export dispach*
Here is the git repository https://github.com/yjwen/org-reveal/
Documenation can also be found here: https://revealjs.com/
**** main config
#+begin_src fundamental
:reveal_properties:
#+reveal_root: https://cdn.jsdelivr.net/npm/reveal.js
#+reveal_reveal_js_version: 4
#+reveal_theme: serif
#+options: timestamp:nil toc:1 num:nil
:end:
#+end_src
**** every line per space
https://revealjs.com/fragments/
#+begin_src fundamental
#+aatr_reveal: :frag (appear)
#+end_src
**** images
#+begin_src fundamental
#+aatr_html: :width 45% :align center
#+end_src
*** org-super-agenda
    configuring the org-agenda view.
  #+begin_src elisp

    (use-package org-super-agenda
      :after org
      :config
      (org-super-agenda-mode 1))

    (setq org-agenda-skip-scheduled-if-done t
	  org-agenda-skip-deadline-if-done t
	  org-agenda-include-deadlines t
	  org-agenda-include-diary t
	  org-agenda-block-separator nil
	  org-agenda-compact-blocks t
	  org-agenda-start-with-log-mode t)

    (setq org-agenda-span 'day)
    (setq org-super-agenda-groups
	  '((:name "Important"
		   :priority "a")
	    (:name "Due today"
		   :deadline today)
	    (:name "Overdue"
		   :deadline past)
	    (:name "Things todo"
		   :todo "TODO")
	    (:name "School work"
		   :todo "WORK")
	    (:name "Completed"
		   :todo "COMPLETED")))

  #+end_src

*** Org-Superstar
    Making the bullets look better
    (In my opinion, these are just bloat and uneccessary so I commented these out. Not for me)
 #+BEGIN_SRC elisp
   ;; (use-package org-superstar
   ;;   :config
   ;;   (setq org-superstar-leading-bullet " ")
   ;;   (setq org-superstar-special-todo-items t) ;; Makes TODO header bullets into boxes
   ;;   (setq org-superstar-todo-bullet-alist '(("TODO" . 9744)
   ;;                                           ("WORK" . 9744)
   ;;                                           ("DEV" . 9744)
   ;;                                           ("RESEARCH" . 9744)
   ;;                                           ("HOLD" . 9744)
   ;;                                           ("PLAN" . 9744)
   ;;                                           ("COMPLETED" . 9745)
   ;;                                           ("FAILED" . 9746)))
   ;;   :hook (org-mode . org-superstar-mode))

   ;; ;; Removes gap when you add a new heading
   ;; (setq org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))

 #+END_SRC

*** Evil-Org
 #+BEGIN_SRC elisp
   (use-package evil-org
     :diminish evil-org-mode
     :after org
     :config
     (add-hook 'org-mode-hook 'evil-org-mode)
     (add-hook 'evil-org-mode-hook
               (lambda () (evil-org-set-key-theme))))

   (require 'evil-org-agenda)
   (evil-org-agenda-set-keys)

 #+END_SRC

*** OrgRoam
If OrgRoam is setup on this system, you can click here for more information: [[id:8317049b-5a2b-4176-9d39-111f310061c7][Org Roam]]
 #+begin_src elisp

   (use-package org-roam
     :ensure t
     :init
     (setq org-roam-v2-ack t)
     :custom
     (org-roam-directory "~/Notes/OrgRoam")
     (org-roam-completion-everywhere t)
     (org-roam-dailies-capture-templates
      '(
	("d" "default" entry "* %<%I:%M %p>: %?"
	 :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n#+filetags: DailyDef"))

	("t" "todo" entry "* TODO: \n%?"
	 :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n#+filetags: DailyTodo"))
	
	("d" "diary" entry "* Diary: \n%?"
	 :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n#+filetags: DailyDiary"))
	))

     (org-roam-capture-templates
      '(
	("d" "default" plain "%?"
	 :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
	 :unnarrowed t)

	("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
	 :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: Project")
	 :unnarrowed t)

	("s" "school" plain "\n%?"
	 :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n#filetags: School")
	 :unnarrowed t)))

     :bind (:map org-mode-map
		 ("C-M-i" . completion-at-point))
     :config
     (org-roam-setup))

   (defun org-roam-node-insert-immediate (arg &rest args)
     (interactive "P")
     (let ((args (cons arg args))
	   (org-roam-capture-templates (list (append (car org-roam-capture-templates)
						     '(:immediate-finish t)))))
       (apply #'org-roam-node-insert args)))

   (rune/leader-keys
     "or"  '(:ignore t :which-key "Org-Roam")
     "orc" '(org-roam-capture :which-key "Capture a node")
     "ori" '(org-roam-node-insert :which-key "Insert note")
     "orI" '(org-roam-node-insert-immediate :which-key "Insert and create a new node without opening it")
     "orf" '(org-roam-node-find :which-key "Find a node")
     "ort" '(org-roam-buffer-toggle :which-key "Toggle")

     "w"  '(:ignore t :which-key "Dailies")
     "wct" '(org-roam-dailies-capture-today :which-key "Capture daily for Today")
     "wcy" '(org-roam-dailies-capture-yesterday :which-key "Capture daily for Yesterday")
     "wcT" '(org-roam-dailies-capture-tomorrow :which-key "Capture daily for Tomorrow")
     "wcd" '(org-roam-dailies-capture-date :which-key "Capture daily for certain date")
     "wgt" '(org-roam-dailies-goto-today :which-key "Check Today's daily")
     "wgy" '(org-roam-dailies-goto-yesterday :which-key "Check Yesterday's daily")
     "wgT" '(org-roam-dailies-goto-tomorrow :which-key "Check Tommorow's daily")
     "wgd" '(org-roam-dailies-goto-date :which-key "Check daily for a specific date"))

 #+end_src
 
* Chatting Configuration
** ERC
   ERC is Emacs's Inbuilt IRC chat platform. (and yes, many people still use IRC. I am actually quite active on it aswell)
   Here is a useful webpage when configuring ERC [[https://systemcrafters.net/live-streams/june-04-2021/][Systemcrafters-Wiki]].
#+BEGIN_SRC elisp

  (require 'erc) ;; Notifications require this to be required

  (setq erc-server "irc.libera.chat"
	erc-nick "Haider"
	erc-user-full-name "Haider Mirza"
	erc-rename-buffers t
	erc-track-shorten-start 8
	erc-autojoin-channels-alist '(("irc.libera.chat" "#systemcrafters" "#emacs" "#guix"))
	erc-kill-buffer-on-part t
	erc-fill-column 120
	erc-fill-function 'erc-fill-static
	erc-fill-static-center 20
	erc-auto-query 'bury
	erc-track-exclude '("#emacs")
	;; erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE" "AWAY")
	;; erc-hide-list '("JOIN" "NICK" "PART" "QUIT" "MODE" "AWAY")
	erc-track-exclude-server-buffer t
	erc-track-enable-keybindings t
	erc-quit-reason (lambda (s) (or s "./Shutdown-Brain"))
	erc-track-visibility nil) ;; Essential if using EXWM

  (defun chat/connect-irc ()
    (interactive)
    (setq erc-password (read-passwd "Password: "))
    (erc-tls
     :server "irc.libera.chat"
     :port 6697
     :nick "Haider"
     :password erc-password))


  (use-package erc-hl-nicks
    :defer 10
    :config
    (add-to-list 'erc-modules 'hl-nicks))

  (use-package erc-image
    :defer 10
    :config
    (setq erc-image-inline-rescale 300)
    (add-to-list 'erc-modules 'image))

  (add-to-list 'erc-modules 'notifications)

  (rune/leader-keys
    "i"  '(:ignore t :which-key "IRC")
    "ii" '(chat/connect-irc :which-key "launch IRC")
    "ib" '(erc-switch-to-buffer :which-key "Switch Buffer"))

#+END_SRC

** Emojify
   
#+begin_src elisp
  (use-package emojify)
   (add-hook 'after-init-hook #'global-emojify-mode)

  (rune/leader-keys
    "a"  '(:ignore t :which-key "Emojify") ;; I know a has no correlation but Im running out of space ok.
    "ai" '(emojify-insert-emoji :which-key "Insert Emoji"))

  (use-package unicode-fonts)

#+end_src
* Keybinds to open files
** Open Documents
These keybindings will open some of my documents.
#+begin_src elisp

  (rune/leader-keys
    "d"  '(:ignore t :which-key "Files")
    "dt" '((lambda() (interactive) (find-file "~/Documents/Home/TODO.org")) :which-key "TODO")
    "dn" '((lambda() (interactive) (find-file "~/Documents/Home/Notes.org")) :which-key "Notes") ;; Need to use Org Roam Later
    "ds" '((lambda() (interactive) (find-file "~/Documents/Home/Reminders.org")) :which-key "Schedule")
    "dh" '((lambda() (interactive) (find-file "~/Documents/School/Homework.org")) :which-key "Homework")
    "dr" '((lambda() (interactive) (find-file "~/Documents/School/School-Reminders.org")) :which-key "Reminders"))
#+end_src

** Open Configs
These keybindings will open my system's config files.
#+begin_src elisp

  (rune/leader-keys
    "c"  '(:ignore t :which-key "Files")
    "ce" '((lambda() (interactive) (find-file "~/Dotfiles/Emacs.org")) :which-key "Emacs config")
    "cd" '((lambda() (interactive) (find-file "~/Dotfiles/Desktop.org")) :which-key "Desktop config")
    "cs" '((lambda() (interactive) (find-file "~/Dotfiles/System.org")) :which-key "System config")
    "cp" '((lambda() (interactive) (find-file "~/Dotfiles/Programs.org")) :which-key "Programs config"))

#+end_src
* MU4E EMail Configuration
** Mu4e
  make sure to install mu-git from the AUR (Arch User Repository) and isync from the official Repository.
#+BEGIN_SRC elisp
  (use-package mu4e
    :ensure nil
    :defer 10 ; Wait until 10 seconds after startup
    :config

    (require 'mu4e-org)

    ;; This is set to 't' to avoid mail syncing issues when using mbsync
    (setq mu4e-change-filenames-when-moving t)

    (setq org-capture-templates
	  `(("m" "Email Workflow")
	    ("mf" "Follow Up" entry (file+headline "~/org/Mail.org" "Follow Up")
	     "* TODO %a\n\n  %i")
	    ("mr" "Read Later" entry (file+headline "~/org/Mail.org" "Read Later")
	     "* TODO %a\n\n  %i")))

    ;; Refresh mail using isync every 10 minutes
    (setq mu4e-update-interval (* 10 60))
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-maildir "~/Mail")

    ;; Configure the function to use for sending mail
    (setq message-send-mail-function 'smtpmail-send-it)

    (setq mu4e-contexts
	  (list
	   ;; Personal account
	   (make-mu4e-context
	    :name "Personal"
	    :match-func
	    (lambda (msg)
	      (when msg
		(string-prefix-p "/Gmail" (mu4e-message-field msg :maildir))))
	    :vars '((user-mail-address . "x7and7@gmail.com")
		    (user-full-name    . "Haider Mirza")
		    (mu4e-compose-signature . "Haider Mirza via Emacs on a GNU/Linux system")
		    (smtpmail-smtp-server  . "smtp.gmail.com")
		    (smtpmail-smtp-service . 465)
		    (smtpmail-stream-type  . ssl)
		    (mu4e-drafts-folder  . "/Gmail/[Gmail]/Drafts")
		    (mu4e-sent-folder  . "/Gmail/[Gmail]/Sent Mail")
		    (mu4e-refile-folder  . "/Gmail/[Gmail]/All Mail")
		    (mu4e-trash-folder  . "/Gmail/[Gmail]/Trash")))

	   ;; Work account
	   (make-mu4e-context
	    :name "Work"
	    :match-func
	    (lambda (msg)
	      (when msg
		(string-prefix-p "/Outlook" (mu4e-message-field msg :maildir))))
	    :vars '((user-mail-address . "ha6mi19@keaston.bham.sch.uk")
		    (user-full-name    . "Haider Mirza")
		    ;;(mu4e-compose-signature . "Haider Mirza via Emacs on a GNU/Linux system")
		    (mu4e-compose-signature . nil) ;; Mu4e signature comes out to be another seperate file.
		    ;; (smtpmail-smtp-server  . "smtp-mail.outlook.com")
		    ;; (smtpmail-smtp-service . 587)
		    ;; (smtpmail-stream-type  . ssl)
		    (mu4e-drafts-folder  . "/Outlook/Drafts")
		    (mu4e-sent-folder  . "/Outlook/Sent")
		    (mu4e-refile-folder  . "/Outlook/Archive")
		    (mu4e-trash-folder  . "/Outlook/Trash")))))

    (add-to-list 'mu4e-bookmarks '("m:/Outlook/INBOX or m:/Gmail/Inbox" "All Inboxes" ?i))

    ;; Sign all of my emails with opengpg keys 
    ;; (setq mml-secure-openpgp-signers '("9EF89A5DC9CCB57E3AC00F2B4441A49825DCD754"))
    ;; (add-hook 'message-send-hook 'mml-secure-message-sign-pgpmime)

    (setq mu4e-context-policy 'pick-first)

    (setq mu4e-maildir-shortcuts
	  '((:maildir "/Gmail/Inbox"    :key ?g)
	    (:maildir "/Outlook/INBOX"     :key ?i)
	    (:maildir "/Gmail/[Gmail]/Sent Mail" :key ?s)
	    (:maildir "/Outlook/Sent" :key ?S)
	    )))

  ;; Make sure plain text mails flow correctly for recipients
  (setq mu4e-compose-format-flowed t)

#+END_SRC

** Mu4e-Alert
#+BEGIN_SRC elisp
  (use-package mu4e-alert)
  (mu4e-alert-enable-mode-line-display)
  (mu4e-alert-set-default-style 'libnotify)
  (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)

#+END_SRC
   
** Org-mime
#+BEGIN_SRC elisp
  (use-package org-mime
    :defer 10
    :config
    (setq org-mime-export-options '(:section-numbers nil
						     :with-author nil
						     :with-toc nil)))

  (add-hook 'org-mime-html-hook
	    (lambda ()
	      (org-mime-change-element-style
	       "pre" (format "color: %s; background-color: %s; padding: 0.5em;"
			     "#E6E1DC" "#232323"))))

  (add-hook 'message-send-hook 'org-mime-htmlize)
#+END_SRC
* Development Configuration
** YASnippet
 #+begin_src elisp
   (use-package yasnippet
     :defer 10
     :config
     (setq yas-snippet-dirs '("~/.emacs.d/snippets/"))
     (yas-reload-all)
     (add-hook 'prog-mode-hook 'yas-minor-mode)
     (add-hook 'text-mode-hook 'yas-minor-mode)
     (yas-global-mode 1))

   (require 'warnings)
   (add-to-list 'warning-suppress-types '(yasnippet backquote-change))

   (rune/leader-keys
     "y"  '(:ignore t :which-key "Yasnippet")
     "yn" '(yas-new-snippet :which-key "yas-new-snippet"))
 #+end_src
** Magit
 #+BEGIN_SRC elisp
   (use-package magit
     :defer 5
     :custom
     (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

   (rune/leader-keys
     "m"  '(:ignore t :which-key "Magit")
     "ms" '(magit-status :which-key "Magit Status")
     "mj" '(magit-status-jump :which-key "Magit jump"))
 #+END_SRC
** Lsp-mode

#+BEGIN_SRC elisp

  ;; (use-package lsp-mode
  ;;   :ensure
  ;;   :commands lsp
  ;;   :custom
  ;;   ;; what to use when checking on-save. "check" is default, I prefer clippy
  ;;   (lsp-rust-analyzer-cargo-watch-command "clippy")
  ;;   (lsp-eldoc-render-all t)
  ;;   (lsp-idle-delay 0.6)
  ;;   (lsp-rust-analyzer-server-display-inlay-hints t)
  ;;   :config
  ;;   (add-hook 'lsp-mode-hook 'lsp-ui-mode))

  ;; (use-package lsp-ui
  ;;   :ensure
  ;;   :commands lsp-ui-mode
  ;;   :custom
  ;;   (lsp-ui-peek-always-show t)
  ;;   (lsp-ui-sideline-show-hover t)
  ;;   (lsp-ui-doc-enable nil))

  ;; (rune/leader-keys
  ;;   "l"  '(:ignore t :which-key "lsp")
  ;;   "ld" 'xref-find-definitions
  ;;   "lr" 'xref-find-references
  ;;   "ln" 'lsp-ui-find-next-reference
  ;;   "lp" 'lsp-ui-find-prev-reference
  ;;   "ls" 'counsel-imenu
  ;;   "le" 'lsp-ui-flycheck-list
  ;;   "lS" 'lsp-ui-sideline-mode
  ;;   "lX" 'lsp-execute-code-action)
#+END_SRC
** Eglot
#+BEGIN_SRC elisp
  (defvar haider-clangd-sh (executable-find "clangd")
    "clangd executable path")

  (use-package eglot
    :ensure t)

  (add-to-list 'eglot-server-programs '((c++ mode c-mode) . (eglot-cquery "cquery")))
  
  (defun dd/projectile-proj-find-function (dir)
  (let ((root (projectile-project-root dir)))
    (and root (cons 'transient root))))

#+END_SRC
** Languages
*** Javascript
Setting up development in Javascript.

#+BEGIN_SRC elisp

  (defun dw/set-js-indentation ()
    (setq js-indent-level 2)
    (setq evil-shift-width js-indent-level)
    (setq-default tab-width 2))

  (use-package js2-mode
    :mode "\\.jsx?\\'"
    :config
    ;; Use js2-mode for Node scripts
    (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))

    ;; Don't use built-in syntax checking
    (setq js2-mode-show-strict-warnings nil)

    ;; Set up proper indentation in JavaScript and JSON files
    (add-hook 'js2-mode-hook #'dw/set-js-indentation)
    (add-hook 'json-mode-hook #'dw/set-js-indentation))


  (use-package apheleia
    :defer 10
    :config
    (apheleia-global-mode +1))

  (use-package prettier-js
    :defer 10
    ;; :hook ((js2-mode . prettier-js-mode)
    ;;        (typescript-mode . prettier-js-mode))
    :config
    (setq prettier-js-show-errors nil))

#+END_SRC
*** ELisp
     #+BEGIN_SRC elisp

       (rune/leader-keys
	 "e"  '(:ignore t :which-key "E-Lisp")
	 "eb" '(eval-buffer :which-key "Evaluate elisp in buffer")
	 "ed" '(eval-defun :which-key "Evaluate defun")
	 "ee" '(eval-expression :which-key "Evaluate elisp expression")
	 "el" '(eval-last-sexp :which-key "Evaluate last sexpression")
	 "er" '(eval-region :which-key "Evaluate elisp in region"))

	 #+END_SRC
*** C/C++
Make sure you have ccls installed
#+BEGIN_SRC elisp
  (use-package ccls
    :defer 5
    :hook ((c-mode c++-mode objc-mode cuda-mode) .
	   (lambda () (require 'ccls) (lsp))))
  
  (defun dd/cpp-eglot-enable ()
    "enable variables and hooks for eglot cpp IDE"
    (interactive)
    (setq company-backends
	  (cons 'company-capf
		(remove 'company-capf company-backends)))
    (with-eval-after-load 'project
      (add-to-list 'project-find-functions
		   'dd/projectile-proj-find-function))
    (add-to-list 'eglot-server-programs
		 `((c++-mode) ,haider-clangd-sh))
    (add-hook 'c++-mode-hook 'eglot-ensure))
  
  (defun dd/cpp-eglot-disable ()
  "disable hook for eglot"
  (interactive)
  (remove-hook 'c++-mode-hook 'eglot-ensure))
#+END_SRC
*** Rust
#+BEGIN_SRC elisp
  (use-package rustic
    :ensure
    :bind (:map rustic-mode-map
		("M-j" . lsp-ui-imenu)
		("M-?" . lsp-find-references)
		("C-c C-c l" . flycheck-list-errors)
		("C-c C-c a" . lsp-execute-code-action)
		("C-c C-c r" . lsp-rename)
		("C-c C-c q" . lsp-workspace-restart)
		("C-c C-c Q" . lsp-workspace-shutdown)
		("C-c C-c s" . lsp-rust-analyzer-status)
		("C-c C-c e" . lsp-rust-analyzer-expand-macro)
		("C-c C-c d" . dap-hydra)
		("C-c C-c h" . lsp-ui-doc-glance))
    :config
    ;; uncomment for less flashiness
    ;; (setq lsp-eldoc-hook nil)
    ;; (setq lsp-enable-symbol-highlighting nil)
    ;; (setq lsp-signature-auto-activate nil)

    ;; comment to disable rustfmt on save
    (setq rustic-format-on-save t)
    (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

  (defun rk/rustic-mode-hook ()
    ;; so that run C-c C-c C-r works without having to confirm, but don't try to
    ;; save rust buffers that are not file visiting. Once
    ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
    ;; no longer be necessary.
    (when buffer-file-name
      (setq-local buffer-save-without-query t)))

    (use-package rust-playground :ensure)

    (use-package toml-mode :ensure)
  
  (rune/leader-keys
    "r"  '(:ignore t :which-key "Rust")
    "rr" 'cargo-process-run)
#+END_SRC
*** Scheme
#+BEGIN_SRC elisp
  (use-package geiser
    :config
    (setq geiser-default-implementation 'guile)
    (setq geiser-active-implementations '(guile))
    (setq geiser-repl-default-port 44555) ; For Gambit Scheme
    (setq geiser-implementations-alist '(((regexp "\\.scm$") guile))))

  (rune/leader-keys
  "s"  '(:ignore t :which-key "Scheme")
  "sr" '(run-guile :which-key "Start a REPL"))
#+END_SRC
*** HTML
#+BEGIN_SRC elisp
  (use-package web-mode
    :mode "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'"
    :config
    (setq-default web-mode-code-indent-offset 2)
    (setq-default web-mode-markup-indent-offset 2)
    (setq-default web-mode-attribute-indent-offset 2))

  ;; 1. Start the server with `httpd-start'
  ;; 2. Use `impatient-mode' on any buffer
  (use-package impatient-mode
    :defer 5)

  (use-package skewer-mode
    :defer 5)

  ;; Run the webserver with command:
  ;; M-x httpd-serve-directory 

  (use-package simple-httpd
    :defer 5)

#+END_SRC
*** YAML
#+BEGIN_SRC elisp
  (use-package yaml-mode
    :mode "\\.ya?ml\\'")

#+END_SRC
** Smart Parens
#+BEGIN_SRC elisp
  (use-package smartparens
    :hook (prog-mode . smartparens-mode))

#+END_SRC

** Company mode
#+BEGIN_SRC elisp
  (use-package company
    :after lsp-mode
    :bind
    (:map company-active-map
	  ("C-n". company-select-next)
	  ("C-p". company-select-previous)
	  ("M-<". company-select-first)
	  ("M->". company-select-last)
	  ("<tab>". tab-indent-or-complete)
	  ("TAB". tab-indent-or-complete)))
    
  (use-package company-box
    :hook (company-mode . company-box-mode))

    (defun company-yasnippet-or-completion ()
      (interactive)
      (or (do-yas-expand)
	  (company-complete-common)))

    (defun check-expansion ()
      (save-excursion
	(if (looking-at "\\_>") t
	  (backward-char 1)
	  (if (looking-at "\\.") t
	    (backward-char 1)
	    (if (looking-at "::") t nil)))))

    (defun do-yas-expand ()
      (let ((yas/fallback-behavior 'return-nil))
	(yas/expand)))

    (defun tab-indent-or-complete ()
      (interactive)
      (if (minibufferp)
	  (minibuffer-complete)
	(if (or (not yas/minor-mode)
		(null (do-yas-expand)))
	    (if (check-expansion)
		(company-complete-common)
	      (indent-for-tab-command)))))
#+END_SRC 

** Compilation
#+BEGIN_SRC elisp
  (use-package compile
    :custom
    (compilation-scroll-output t))

  (defun auto-recompile-buffer ()
    (interactive)
    (if (member #'recompile after-save-hook)
        (remove-hook 'after-save-hook #'recompile t)
      (add-hook 'after-save-hook #'recompile nil t)))

#+END_SRC
** Flycheck
Flycheck kinda calls everything to be an error. Kind of anoyying
#+BEGIN_SRC elisp
  ;; (use-package flycheck :ensure)
#+END_SRC
** Tree
   I dont really use these Tree programs and use counsel-recentf or keybinds to switch files quickly instead.
*** Neotree
 The tree directory listing in Emacs.
 #+begin_src elisp
   ;; (use-package neotree)
   ;; (setq neo-smart-open t
   ;;       neo-window-fixed-size nil)
   ;; (setq doom-neotree-enable-variable-pitch t)
   ;; (rune/leader-keys
   ;;   "n"  '(:ignore t :which-key "Neotree")
   ;;   "nt" '(neotree-toggle :which-key "Toggle neotree in file viewer")
   ;;   "nd" '(neotree-dir :which-key "Open a directory in Neotree"))

 #+end_src
*** Org-Sidebar
 #+BEGIN_SRC elisp
   ;; (use-package org-sidebar)

   ;; (rune/leader-keys
   ;;   "no" '(org-sidebar-tree :which-key "Tree Org"))

 #+END_SRC
* Terminal Configurations
** VTerm
 #+BEGIN_SRC elisp
   (use-package vterm
     :after evil-collection
     :commands vterm
     :config
     (setq vterm-max-scrollback 10000)
     (advice-add 'evil-collection-vterm-insert :before #'vterm-reset-cursor-point))

    (rune/leader-keys
      "v" '(vterm :which-key "launch vterm"))
   
   ;; (rune/leader-keys
   ;;   "v"  '(:ignore t :which-key "Vterm")
   ;;   "vv" '(vterm :which-key "launch vterm")
   ;;   "vt" '(vterm-toggle :which-key "vterm-toggle"))

   (global-set-key (kbd "s-v") 'vterm)
 #+END_SRC
** VTerm-toggle
#+BEGIN_SRC elisp
  ;; (use-package vterm-toggle)
#+END_SRC
** Eshell
#+BEGIN_SRC elisp
  (rune/leader-keys
  "e"  '(:ignore t :which-key "Eshell")
  "es" '(eshell :which-key "Launch Eshell")
  "eh" '(counsel-esh-history :which-key "Eshell History"))

 #+END_SRC 
* Password Managment
Uses the standard Unix password store "pass".

#+begin_src elisp
    (use-package password-store
      :defer 0)

  ;; Used to access passwords through emacs using Emacs's server-mode
    (defun efs/lookup-password (&rest keys)
      (let ((result (apply #'auth-source-search keys)))
	(if result
	    (funcall (plist-get (car result) :secret))
	  nil)))

#+end_src

* Emacs server-mode
#+BEGIN_SRC elisp
  (server-start)

#+END_SRC

* Load Desktop.org
  This loads EXWM and the rest of my system.
  #+BEGIN_SRC elisp
 (load-file "~/.emacs.d/desktop.el")
  #+END_SRC

* Garbage Collecter Hack
  #+BEGIN_SRC elisp
    ;; Make gc pauses faster by decreasing the threshold.
    (setq gc-cons-threshold (* 2 1000 1000))
  #+END_SRC
