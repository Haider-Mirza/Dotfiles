#+TITLE: =Emacs configuration=
#+PROPERTY: header-args:elisp :tangle /home/haider/.emacs.d/init.el
#+AUTHOR: Haider Mirza

* Table of contents :toc:
- [[#note][Note]]
  - [[#replace-capslock-with-ctrl][Replace Capslock with CTRL]]
- [[#tweak-garbage-collector][Tweak Garbage Collector]]
- [[#package-system-setup][Package System Setup]]
  - [[#setup (:pkg][use-package]]
- [[#startup-performance][Startup Performance]]
- [[#keybinding-configuration][Keybinding Configuration]]
  - [[#general][General]]
  - [[#evil-mode][Evil Mode]]
  - [[#evil-collection][Evil Collection]]
- [[#ui-configuration][UI Configuration]]
  - [[#font][Font]]
  - [[#load-theme][Load Theme]]
  - [[#minimal-visuals][Minimal Visuals]]
  - [[#center-documents][Center Documents]]
  - [[#vertico][Vertico]]
  - [[#frame-transparency-and-maximize-windows][frame transparency and maximize windows.]]
  - [[#line-numbers][Line numbers]]
  - [[#modeline][Modeline]]
- [[#general-configuration][General Configuration]]
  - [[#auto-revert-buffers][Auto Revert buffers]]
  - [[#which-key][Which key]]
  - [[#windows-movement][Windows movement]]
  - [[#file-control][File control]]
  - [[#recentf][Recentf]]
  - [[#interactions][Interactions]]
  - [[#counsel][Counsel]]
  - [[#helpful][Helpful]]
  - [[#hydra][Hydra]]
- [[#keep-directories-clean][Keep Directories Clean]]
- [[#editing-files-configuration][Editing Files Configuration]]
  - [[#swiper][Swiper]]
  - [[#comment-lines][Comment Lines]]
  - [[#org][Org]]
- [[#chatting-configuration][Chatting Configuration]]
  - [[#erc][ERC]]
  - [[#emojify][Emojify]]
- [[#keybinds-to-open-files][Keybinds to open files]]
  - [[#open-documents][Open Documents]]
  - [[#open-configs][Open Configs]]
- [[#mu4e-email-configuration][MU4E EMail Configuration]]
  - [[#mu4e][Mu4e]]
  - [[#mu4e-alert][Mu4e-Alert]]
  - [[#org-mime][Org-mime]]
- [[#development-configuration][Development Configuration]]
  - [[#yasnippet][YASnippet]]
  - [[#magit][Magit]]
  - [[#lsp-mode][Lsp-mode]]
  - [[#dap-mode][Dap-mode]]
  - [[#eglot][Eglot]]
  - [[#languages][Languages]]
  - [[#smart-parens][Smart Parens]]
  - [[#company-mode][Company mode]]
  - [[#compilation][Compilation]]
  - [[#flycheck][Flycheck]]
  - [[#tree][Tree]]
- [[#terminal-configurations][Terminal Configurations]]
  - [[#vterm][VTerm]]
  - [[#vterm-toggle][VTerm-toggle]]
  - [[#eshell][Eshell]]
- [[#password-managment][Password Managment]]
- [[#emacs-server-mode][Emacs server-mode]]
- [[#load-desktoporg][Load Desktop.org]]
- [[#garbage-collecter-hack][Garbage Collecter Hack]]
  
* Note
** Package Management
My Emacs packages are installed by the GNU Guix package manager and by using it's Guix Home feature.
Make sure to load my Guix Home configuration or install all the packages using Emacs. 
** Replace Capslock with CTRL
   You dont have to but I have replaced CapsLock with CTRL (On my system. Not on Emacs)
   Most people don’t use the CapsLock key (unless you like YELLING ON THE INTERNET)
   So you can use this simple fix to replace it with the CTRL to make your Emacs life easier.
   Doing this will prevent you from having to bend your pinky down all day long to hit all those fabled Emacs keybindings,
   allowing you to keep your hands on the home row of the keyboard.

   There are many ways to accomplish this in Linux, but the easiest (and most repeatable) I’ve found is to use xmodmap.
   First, make sure you have it xmodmap installed.
   Then, create a file named .Xmodmap in your home folder and populate it like so:

   #+BEGIN_SRC
   clear lock
   clear control
   keycode 66 = Control_L
   add control = Control_L
   add Lock = Control_R
   #+end_src

   This replaces CapsLock with control and also replaces the Ctrl key on the right side with CapsLock just in case you ever need to use it.
   Most login systems (GDM, KDM, etc) will load this file when you log in so you might not need to do anything extra for it to take effect, just log out and log back in again.
   If that doesn’t seem to work, you can add this line to one of your startup files (.xinitrc, .profile, window manager configuration, etc):
   (I have already enabled this in my EXWM config (desktop.org))
   #+BEGIN_SRC
   xmodmap ~/path/to/.Xmodmap
   #+end_src
* Package Cl
When starting up Emacs, there is a error saying "Package cl is depricated" 
You can disable this by tangling this to *early-init.el*.
Here is a post on the matter

#+BEGIN_SRC elisp :tangle "/home/haider/.emacs.d/early-init.el"
(setq byte-compile-warnings '(cl-functions))
#+END_SRC

* Package Management

I use Guix primarily to manage my Emacs packages, but some still require the use of an Emacs-based package manager.  I use straight.el for this purpose!

** Straight & use-package
#+begin_src elisp

  (setq dw/is-guix-system (and (eq system-type 'gnu/linux)
			       (require 'f)
			       (string-equal (f-read "/etc/issue")
					     "\nThis is the GNU system.  Welcome.\n")))

  (unless (featurep 'straight)
    ;; Bootstrap straight.el
    (defvar bootstrap-version)
    (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage)))

  ;; Use straight.el for use-package expressions
  (straight-use-package 'use-package)

#+end_src

Sometimes it's good to clean up unused repositories if I've removed packages from my configuration.  Use =straight-remove-unused-repos= for this purpose.

********** Setup.el

I've recently switched to the excellent [[https://www.emacswiki.org/emacs/SetupEl][setup.el]] by [[https://ruzkuku.com][pkal]] as an alternative to =use-package=.

#+begin_src elisp

  (straight-use-package '(setup :type git :host nil :repo "https://git.sr.ht/~pkal/setup"))
  (require 'setup)

  ;; Uncomment this for debugging purposes
  ;; (defun dw/log-require (&rest args)
  ;;   (with-current-buffer (get-buffer-create "*require-log*")
  ;;     (insert (format "%s\n"
  ;;                     (file-name-nondirectory (car args))))))
  ;; (add-to-list 'after-load-functions #'dw/log-require)

#+end_src

** :pkg

The =:pkg= keyword will depend on Guix-installed Emacs packages unless the parameter seems like a =straight.el= recipe (it's a list).

#+begin_src elisp

  ;; Recipe is always a list
  ;; Install via Guix if length == 1 or :guix t is present

  (defvar dw/guix-emacs-packages '()
    "Contains a list of all Emacs package names that must be
  installed via Guix.")

  ;; Examples:
  ;; - (org-roam :straight t)
  ;; - (git-gutter :straight git-gutter-fringe)

  (defun dw/filter-straight-recipe (recipe)
    (let* ((plist (cdr recipe))
           (name (plist-get plist :straight)))
      (cons (if (and name (not (equal name t)))
                name
              (car recipe))
            (plist-put plist :straight nil))))

  (setup-define :pkg
    (lambda (&rest recipe)
      (if (and dw/is-guix-system
               (or (eq (length recipe) 1)
                   (plist-get (cdr recipe) :guix)))
          `(add-to-list 'dw/guix-emacs-packages
                        ,(or (plist-get recipe :guix)
                             (concat "emacs-" (symbol-name (car recipe)))))
        `(straight-use-package ',(dw/filter-straight-recipe recipe))))
    :documentation "Install RECIPE via Guix or straight.el"
    :shorthand #'cadr)

#+end_src

** :delay

Delay the loading of a package until a certain amount of idle time has passed.

#+begin_src elisp

  (setup-define :delay
     (lambda (&rest time)
       `(run-with-idle-timer ,(or time 1)
                             nil ;; Don't repeat
                             (lambda () (require ',(setup-get 'feature)))))
     :documentation "Delay loading the feature until a certain amount of idle time has passed.")

#+end_src

** :disabled

Used to disable a package configuration, similar to =:disabled= in =use-package=.

#+begin_src elisp

  (setup-define :disabled
    (lambda ()
      `,(setup-quit))
    :documentation "Always stop evaluating the body.")

#+end_src

** :load-after

This keyword causes a body to be executed after other packages/features are loaded:

#+begin_src elisp

  (setup-define :load-after
      (lambda (features &rest body)
        (let ((body `(progn
                       (require ',(setup-get 'feature))
                       ,@body)))
          (dolist (feature (if (listp features)
                               (nreverse features)
                             (list features)))
            (setq body `(with-eval-after-load ',feature ,body)))
          body))
    :documentation "Load the current feature after FEATURES."
    :indent 1)

#+end_src 
* Tweak Garbage Collector
  This variable will set to normal at the end of my config.
  #+BEGIN_SRC elisp
    ;; The default is 800 kilobytes.  Measured in bytes.
    (setq gc-cons-threshold (* 50 1000 1000))

  #+END_SRC
* Startup Performance
  Find out how long it had taken to load Emacs.
#+BEGIN_SRC elisp
  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
	     (format "%.2f seconds"
		     (float-time
		     (time-subtract after-init-time before-init-time)))
	     gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+END_SRC
* Keybinding Configuration
** General
#+begin_src elisp
  (setup (:pkg general)
    (general-create-definer rune/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (rune/leader-keys
      "SPC" '(find-file :which-key "find file")))
#+end_src
** Evil Mode
#+begin_src elisp
  (setup (:pkg undo-tree)
    (setq undo-tree-auto-save-history nil)
    (global-undo-tree-mode 1))

    (setup (:pkg evil)
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      (setq evil-want-C-u-scroll t)
      (setq evil-want-C-i-jump nil)
      (setq evil-respect-visual-line-mode t)
      (setq evil-undo-system 'undo-tree)

      (evil-mode 1)
      (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
      (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

      ;; Use visual line motions even outside of visual-line-mode buffers
      (evil-global-set-key 'motion "j" 'evil-next-visual-line)
      (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

      (evil-set-initial-state 'messages-buffer-mode 'normal)
      (evil-set-initial-state 'dashboard-mode 'normal))

    (evil-mode 1)

    ;; Make ESC quit prompts
    (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
** Evil Collection
#+begin_src elisp
  (setup (:pkg evil-collection)
    (evil-collection-init))
#+end_src
* UI Configuration
** Scratch Buffer
#+BEGIN_SRC elisp
  (setq initial-scratch-message "Make sure to check OrgAgenda and OrgRoam Dailies!\nRun: (exwm/startup)")
#+END_SRC
** Font
   Make sure "font-jetbrains-mono" is installed on your system.
   The name may be different depending on your Operating System.
#+begin_src elisp
  (defvar efs/default-font-size 80)
  
  (set-face-attribute 'default nil
		      :font "JetBrains Mono"
		      :weight 'light
		      :height efs/default-font-size)
#+end_src
** Load Theme
#+begin_src elisp
  (setup (:pkg doom-themes))
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-molokai t)
#+end_src
** Minimal Visuals
Make the User interface more minimal.
#+begin_src elisp
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)          ; Disable the menu bar

  ;; Disable this anoyying visible bell
  (setq visible-bell nil)
#+end_src

** Center Documents
Center org-mode documents.

#+begin_src elisp
  (defun org/org-mode-visual-fill ()
    (setq visual-fill-column-width 180
	  visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (setup (:pkg visual-fill-column)
    (:hook-into org-mode))
#+end_src
** Vertico
 #+BEGIN_SRC elisp
   (setup (:pkg vertico)
     (vertico-mode)
     (:with-map vertico-map
       (:bind "C-j" vertico-next
	      "C-k" vertico-previous
	      "C-f" vertico-exit))
     (:option vertico-cycle t))

   (setup savehist
     (savehist-mode 1))
 #+END_SRC 
** Marginalia
#+BEGIN_SRC elisp
  (setup (:pkg marginalia)
    (:option marginalia-annotators '(marginalia-annotators-heavy
				     marginalia-annotators-light
				     nil))
    (marginalia-mode))
#+END_SRC 
** frame transparency and maximize windows. 
#+BEGIN_SRC elisp
  (set-frame-parameter (selected-frame) 'alpha '(95 . 95))
  (add-to-list 'default-frame-alist '(alpha . (95 . 95)))
#+END_SRC
** Rainbow Delimiters
#+begin_src elisp
  (setup (:pkg rainbow-delimiters)
    (:hook-into prog-mode))
#+end_src
** Line numbers
#+begin_src elisp
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  dashboard-mode-hook
                  vterm-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Modeline

#+begin_src elisp
  (setup (:pkg all-the-icons))

  (setup (:pkg all-the-icons-completion)
    (all-the-icons-completion-mode))

  (setup (:pkg doom-modeline)
    (:hook-into after-init-hook)
    (:option doom-modeline-lsp t
	     doom-modeline-height 17
	     doom-modeline-buffer-encoding nil
	     doom-modeline-github nil
	     doom-modeline-project-detection 'auto
	     doom-modeline-number-limit 99
	     doom-modeline-mu4e t
	     doom-modeline-irc t)

    ;; Show the time and date in modeline
    (setq display-time-day-and-date t)
    ;; Enable the time & date in the modeline
    (display-time-mode 1)
    (setq display-time-string-forms '((format-time-string "%H:%M" now))))
#+end_src 
* General Configuration
** Auto Revert buffers
#+BEGIN_SRC elisp
  ;; Revert buffers when the underlying file has changed
  (global-auto-revert-mode 1)

#+END_SRC
*** Dired
This can also happen in Dired.
#+BEGIN_SRC elisp
  ;; Revert Dired and other buffers
  (setq global-auto-revert-non-file-buffers t)

#+END_SRC
** Which key
#+begin_src elisp 
  (setup (:pkg which-key)
    (diminish 'which-key-mode)
    (which-key-mode)
    (setq which-key-idle-delay 1))
#+end_src
** Windows movement
#+BEGIN_SRC elisp
    (global-set-key (kbd "<s-left>") 'windmove-left)
    (global-set-key (kbd "<s-right>") 'windmove-right)
    (global-set-key (kbd "<s-up>") 'windmove-up)
    (global-set-key (kbd "<s-down>") 'windmove-down)
#+END_SRC 
** File control
#+BEGIN_SRC elisp
  (rune/leader-keys
  "x"  '(:ignore t :which-key "Delete")
  "c"  '(:ignore t :which-key "Create")
  "xf" '(delete-file :which-key "Delete file")
  "xd" '(delete-directory :which-key "Delete directory")
  "cf" '(make-empty-file :which-key "Create empty file")
  "cf" '(make-directory :which-key "Create directory"))

#+END_SRC
** Recentf
#+BEGIN_SRC elisp
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (setq recentf-max-saved-items 25)

  (run-at-time nil (* 5 60) 'recentf-save-list)

  (rune/leader-keys
    "t" '(counsel-recentf :which-key "Recent files"))
#+END_SRC
** Interactions
  
#+BEGIN_SRC elisp
   (fset 'yes-or-no-p 'y-or-n-p)
   (setq confirm-kill-emacs 'yes-or-no-p)
 #+END_SRC
** Counsel
Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.
#+begin_src elisp
  (setup (:pkg counsel)
       (:bind "M-x" counsel-M-x))
#+end_src

** Helpful
   Helpful adds a lot of very helpful (get it?) information to Emacs’ describe- command buffers.
   For example, if you use describe-function, you will not only get the documentation about the function,
   you will also see the source code of the function and where it gets used in other places in the Emacs configuration.
   It is very useful for figuring out how things work in Emacs.
#+begin_src elisp
  (setup (:pkg helpful))
#+end_src
** Hydra

 [[https://github.com/abo-abo/hydra#sample-hydras][Hydra's Github Page]]
 I don't use hydra right now.
#+BEGIN_SRC elisp
   (setup (:pkg hydra)
     (require 'hydra))

   ;; This needs a more elegant ASCII banner
   (defhydra hydra-exwm-move-resize
     (global-map "<C-M-tab>")
     "Move/Resize Window (Shift is bigger steps, Ctrl moves window)"
     ("j" (lambda () (interactive) (exwm-layout-enlarge-window 10)) "V 10")
     ("J" (lambda () (interactive) (exwm-layout-enlarge-window 30)) "V 30")
     ("k" (lambda () (interactive) (exwm-layout-shrink-window 10)) "^ 10")
     ("K" (lambda () (interactive) (exwm-layout-shrink-window 30)) "^ 30")
     ("h" (lambda () (interactive) (exwm-layout-shrink-window-horizontally 10)) "< 10")
     ("H" (lambda () (interactive) (exwm-layout-shrink-window-horizontally 30)) "< 30")
     ("l" (lambda () (interactive) (exwm-layout-enlarge-window-horizontally 10)) "> 10")
     ("L" (lambda () (interactive) (exwm-layout-enlarge-window-horizontally 30)) "> 30")
     ("C-j" (lambda () (interactive) (exwm-floating-move 0 10)) "V 10")
     ("C-S-j" (lambda () (interactive) (exwm-floating-move 0 30)) "V 30")
     ("C-k" (lambda () (interactive) (exwm-floating-move 0 -10)) "^ 10")
     ("C-S-k" (lambda () (interactive) (exwm-floating-move 0 -30)) "^ 30")
     ("C-h" (lambda () (interactive) (exwm-floating-move -10 0)) "< 10")
     ("C-S-h" (lambda () (interactive) (exwm-floating-move -30 0)) "< 30")
     ("C-l" (lambda () (interactive) (exwm-floating-move 10 0)) "> 10")
     ("C-S-l" (lambda () (interactive) (exwm-floating-move 30 0)) "> 30")
     ("f" nil "finished" :exit t))
#+END_SRC 
** Buffers
#+begin_src elisp
  (setup (:pkg consult))
#+end_src
* MPV Playlist Functions
Playlist functions
#+BEGIN_SRC elisp

  (setq mpv-playlist.txt "~/.config/qutebrowser/playlist.txt")

  (defun mpv-playlist-add ()
    "Insert web videos to a playlist.txt"
    (interactive)
    (setq mpv-query (concat (read-string "Information: ") "-" (read-string "Paste URL: ")))
    (start-process-shell-command "to-file" nil (concat "printf \"" mpv-query "\n\">> " mpv-playlist.txt)))


  (defun mpv-playlist-load ()
    "Load web videos from playlist.txt"
    (interactive)
    (setq mpv-playlist-line
	  (completing-read "Select Video: "
			   (with-current-buffer (find-file-noselect mpv-playlist.txt)
			     (mapcar (lambda (x) (split-string x " " t))
				     (split-string
				      (buffer-substring-no-properties (point-min) (point-max))
				      "\n")))))


    (setq mpv-selected-video (delete (car (split-string mpv-playlist-line "-")) (split-string mpv-playlist-line "-")))

    (start-process-shell-command "launch mpv" nil (mapconcat 'identity (append '("mpv") mpv-selected-video) " "))
    (exwm-workspace-switch-create 3))

  (rune/leader-keys
    "v"  '(:ignore t :which-key "Video")
    "va" '(mpv-playlist-add :which-key "Add a video to my mpv playlist")
    "vl" '(mpv-playlist-load :which-key "Load a video from my mpv playlist"))

#+END_SRC
* Keep Directories Clean
  Makes Emacs keep my file directories clean of unnecessary files.
#+BEGIN_SRC elisp
  (setup (:pkg no-littering)
  (require 'no-littering))

  (setq backup-by-copying t)

  (setq delete-old-versions t
	kept-new-versions 6
	kept-old-versions 2
	version-control t)

  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
  ;; auto-save-mode doesn't create the path automatically!
  (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)

  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
	auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))
#+END_SRC

* Editing Files Configuration
** Swiper
   #+BEGIN_SRC elisp
  (global-set-key (kbd "C-s-s") 'swiper)
   #+END_SRC
** Comment Lines
#+BEGIN_SRC elisp
  (rune/leader-keys
  "TAB" '(comment-dwim :which-key "comment lines"))
#+END_SRC
** Org

   Here consists configs for:
   - Org Mode
   - Org Agenda
   - Org Roam
   - Org pandoc
   - Org reveal
   - Org superstar
   - Org appear
    
*** OrgMode Main config
#+begin_src elisp
  (setup (:pkg prettier))

  (rune/leader-keys
    "o"  '(:ignore t :which-key "Org")
    "oa" '(org-agenda :which-key "View Org-Agenda")
    "ol" '(org-agenda-list :which-key "View Org-Agendalist")
    "oL" '(org-insert-link :which-key "View Org-Agendalist")
    "ot" '(org-babel-tangle :which-key "Tangle Document")
    "ox" '(org-export-dispatch :which-key "Export Document")
    "od" '(org-deadline :which-key "Deadline")
    "os" '(org-todo :which-key "Switch"))

  (setup (:pkg org)
    (setq org-ellipsis " ▾")

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-src-fontify-natively t) ;; Syntax highlighting in org src blocks
    (setq org-startup-folded t) ;; Org files start up folded by default
    (setq org-image-actual-width nil)

    (setq org-agenda-files
	  '("~/documents/Home/Reminders.org"
	    "~/documents/Home/TODO.org"
	    "~/documents/School/Homework.org"
	    "~/documents/School/School-Reminders.org"))

    (setq org-todo-keywords
	  '((sequence
	     "TODO(t)"
	     "WORK(w)"
	     "RESEARCH(r)"
	     "HOLD(h)"
	     "PLAN(p)"
	     "|"
	     "DONE(d)"
	     "FAILED(f)")))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)
  
    (org/org-mode-visual-fill))

  (setup (:pkg org-superstar)
    (:load-after org)
    (:hook-into org-mode)
    (:option org-superstar-remove-leading-stars t
	     org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))

  (setup org-faces
    ;; Make sure org-indent face is available
    (:also-load org-indent)
    (:when-loaded
    
      (dolist (face '((org-level-1 . 1.2)
		      (org-level-2 . 1.1)
		      (org-level-3 . 1.05)
		      (org-level-4 . 1.0)
		      (org-level-5 . 1.1)
		      (org-level-6 . 1.1)
		      (org-level-7 . 1.1)
		      (org-level-8 . 1.1))))

      ;; Ensure that anything that should be fixed-pitch in Org files appears that way
      (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
      (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
      (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
      (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

      ;; Get rid of the background on column views
      (set-face-attribute 'org-column nil :background nil)
      (set-face-attribute 'org-column-title nil :background nil)))
#+END_SRC
*** ox-pandoc
    Expand org-mode's exporting capabilities
    Make sure the pandoc is installed on your system.
#+BEGIN_SRC elisp
  (setup (:pkg pandoc))
#+END_SRC
*** org-appear
#+BEGIN_SRC elisp
   (setup (:pkg org-appear)
     (:hook-into org-mode)
     (setq org-appear-autoemphasis t)  ;; Enable org-appear on emphasis (bold, italics, etc)
     (setq org-appear-autolinks t) ;; Enable on links
     (setq org-appear-autosubmarkers t)) ;; Enable on subscript and superscript
#+END_SRC
*** ox-reveal
Export Orgmode to presentations.
This Emacs file has been installed by Guix.
Here is my configuration; Place this at the top of your OrgMode document then export with *org export dispach*
Here is the git repository https://github.com/yjwen/org-reveal/
Documenation can also be found here: https://revealjs.com/
**** main config
#+begin_src fundamental
:reveal_properties:
#+reveal_root: https://cdn.jsdelivr.net/npm/reveal.js
#+reveal_reveal_js_version: 4
#+reveal_theme: serif
#+options: timestamp:nil toc:1 num:nil
:end:
#+end_src
**** every line per space
https://revealjs.com/fragments/
#+begin_src fundamental
#+aatr_reveal: :frag (appear)
#+end_src
**** images
#+begin_src fundamental
#+aatr_html: :width 45% :align center
#+end_src
*** org-super-agenda
    configuring the org-agenda view.
#+begin_src elisp

  (setup (:pkg org-super-agenda)
    (setq org-agenda-skip-scheduled-if-done t
	  org-agenda-skip-deadline-if-done t
	  org-agenda-include-deadlines t
	  org-agenda-include-diary t
	  org-agenda-block-separator nil
	  org-agenda-compact-blocks t
	  org-agenda-start-with-log-mode t)

    (setq org-agenda-span 'day)
    (setq org-super-agenda-groups
	  '((:name "Important"
		   :priority "a")
	    (:name "Due today"
		   :deadline today)
	    (:name "Overdue"
		   :deadline past)
	    (:name "Things todo"
		   :todo "TODO")
	    (:name "School work"
		   :todo "WORK")
	    (:name "Completed"
		   :todo "COMPLETED")))
    (org-super-agenda-mode 1))

#+end_src

#+BEGIN_SRC elisp
   (setup (:pkg evil-org)
     (:hook-into org-mode org-agenda-mode)
     (require 'evil-org)
     (require 'evil-org-agenda)
     (evil-org-set-key-theme '(navigation todo insert textobjects additional))
     (evil-org-agenda-set-keys))
#+END_SRC
 
*** OrgRoam
If OrgRoam is setup on this system, you can click here for more information: [[id:8317049b-5a2b-4176-9d39-111f310061c7][Org Roam]]
#+begin_src elisp
  (setup (:pkg org-roam)
    (setq org-roam-v2-ack t)
    (setq dw/daily-note-filename "%<%Y-%m-%d>.org"
	  dw/daily-note-header "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")

    (:when-loaded
      (org-roam-db-autosync-mode))

    (:option
     org-roam-directory "~/Notes/"
     org-roam-dailies-directory "Journal/"
     org-roam-completion-everywhere t
     org-roam-capture-templates
     '(("d" "default" plain "%?"
	:if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
	:unnarrowed t)
       ("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
	:if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: Project")
	:unnarrowed t)
       ("s" "school" plain "\n%?"
	:if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n#filetags: School")
	:unnarrowed t))
     org-roam-dailies-capture-templates
     `(("d" "default" entry "* %<%I:%M %p>: %?"
	:if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n#+filetags: DailyDef"))
       ("t" "todo" entry "* TODO: \n%?"
	:if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n#+filetags: DailyTodo"))
       ("d" "diary" entry "* Diary: \n%?"
	:if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n#+filetags: DailyDiary")))))

  ;; (setup (:pkg org-roam :straight t)
  ;;   (setq org-roam-v2-ack t)
  ;;   (:option
  ;;    org-roam-directory "~/Notes/"
  ;;    org-roam-dailies-directory "Journal/"
  ;;    org-roam-completion-everywhere t

  ;;    (org-roam-dailies-capture-templates
  ;;     '(
  ;;       ("d" "default" entry "* %<%I:%M %p>: %?"
  ;;        :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n#+filetags: DailyDef"))

  ;;       ("t" "todo" entry "* TODO: \n%?"
  ;;        :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n#+filetags: DailyTodo"))

  ;;       ("d" "diary" entry "* Diary: \n%?"
  ;;        :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n#+filetags: DailyDiary"))
  ;;       ))

  ;;    (org-roam-capture-templates
  ;;     '(
  ;;       ("d" "default" plain "%?"
  ;;        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
  ;;        :unnarrowed t)

  ;;       ("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
  ;;        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: Project")
  ;;        :unnarrowed t)

  ;;       ("s" "school" plain "\n%?"
  ;;        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n#filetags: School")
  ;;        :unnarrowed t))))

  ;;   (:bind "C-M-i" completion-at-point)

  ;;   (org-roam-setup))

  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (cons arg args))
	  (org-roam-capture-templates (list (append (car org-roam-capture-templates)
						    '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))

  (rune/leader-keys
    "or"  '(:ignore t :which-key "Org-Roam")
    "orc" '(org-roam-capture :which-key "Capture a node")
    "ori" '(org-roam-node-insert :which-key "Insert note")
    "orI" '(org-roam-node-insert-immediate :which-key "Insert and create a new node without opening it")
    "orf" '(org-roam-node-find :which-key "Find a node")
    "ort" '(org-roam-buffer-toggle :which-key "Toggle")

    "w"  '(:ignore t :which-key "Dailies")
    "wct" '(org-roam-dailies-capture-today :which-key "Capture daily for Today")
    "wcy" '(org-roam-dailies-capture-yesterday :which-key "Capture daily for Yesterday")
    "wcT" '(org-roam-dailies-capture-tomorrow :which-key "Capture daily for Tomorrow")
    "wcd" '(org-roam-dailies-capture-date :which-key "Capture daily for certain date")
    "wgt" '(org-roam-dailies-goto-today :which-key "Check Today's daily")
    "wgy" '(org-roam-dailies-goto-yesterday :which-key "Check Yesterday's daily")
    "wgT" '(org-roam-dailies-goto-tomorrow :which-key "Check Tommorow's daily")
    "wgd" '(org-roam-dailies-goto-date :which-key "Check daily for a specific date"))
#+end_src
 
* Chatting Configuration
** ERC
   ERC is Emacs's Inbuilt IRC chat platform. (and yes, many people still use IRC. I am actually quite active on it aswell)
   Here is a useful webpage when configuring ERC [[https://systemcrafters.net/live-streams/june-04-2021/][Systemcrafters-Wiki]].
#+BEGIN_SRC elisp

  (require 'erc) ;; Notifications require this to be required

  (setq erc-server "irc.libera.chat"
	erc-nick "Haider"
	erc-user-full-name "Haider Mirza"
	erc-rename-buffers t
	erc-track-shorten-start 8
	;; erc-autojoin-channels-alist '(("irc.libera.chat" "#systemcrafters" "#emacs" "#guix"))
	erc-kill-buffer-on-part t
	erc-fill-column 120
	erc-fill-function 'erc-fill-static
	erc-fill-static-center 20
	erc-auto-query 'bury
	erc-track-exclude '("#emacs")
	;; erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE" "AWAY")
	;; erc-hide-list '("JOIN" "NICK" "PART" "QUIT" "MODE" "AWAY")
	erc-track-exclude-server-buffer t
	erc-track-enable-keybindings t
	erc-quit-reason (lambda (s) (or s "Ejected from the cyberspace!"))
	erc-track-visibility nil) ;; Essential if using EXWM

  (defun chat/connect-irc ()
    (interactive)
    (setq erc-password (read-passwd "Password: "))
    (erc-tls
     :server "irc.libera.chat"
     :port 6697
     :nick "Haider"
     :password erc-password))


  (setup (:pkg erc-hl-nicks)
    (add-to-list 'erc-modules 'hl-nicks))

  (setup (:pkg erc-image)
    (setq erc-image-inline-rescale 300)
    (add-to-list 'erc-modules 'image))

  (add-to-list 'erc-modules 'notifications)

  (rune/leader-keys
    "i"  '(:ignore t :which-key "IRC")
    "ii" '(chat/connect-irc :which-key "launch IRC")
    "ib" '(erc-switch-to-buffer :which-key "Switch Buffer"))

#+END_SRC

** Emojify
   
#+begin_src elisp
  (setup (:pkg emojify)
    (add-hook 'after-init-hook #'global-emojify-mode))

  (rune/leader-keys
    "a"  '(:ignore t :which-key "Emojify") ;; I know a has no correlation but Im running out of space ok.
    "ai" '(emojify-insert-emoji :which-key "Insert Emoji"))

  (setup (:pkg unicode-fonts))
#+end_src
* Keybinds to open files
** Open Documents
These keybindings will open some of my documents.
#+begin_src elisp
  (rune/leader-keys
    "d"  '(:ignore t :which-key "Files")
    "dt" '((lambda() (interactive) (find-file "~/documents/Home/TODO.org")) :which-key "TODO")
    "ds" '((lambda() (interactive) (find-file "~/documents/Home/Reminders.org")) :which-key "Schedule")
    "dh" '((lambda() (interactive) (find-file "~/documents/School/Homework.org")) :which-key "Homework")
    "dr" '((lambda() (interactive) (find-file "~/documents/School/School-Reminders.org")) :which-key "Reminders"))
#+end_src

** Open Configs
These keybindings will open my system's config files.
#+begin_src elisp
  (rune/leader-keys
    "c"  '(:ignore t :which-key "Files")
    "ce" '((lambda() (interactive) (find-file "~/dotfiles/emacs.org")) :which-key "Emacs config")
    "cd" '((lambda() (interactive) (find-file "~/dotfiles/desktop.org")) :which-key "Desktop config")
    "cs" '((lambda() (interactive) (find-file "~/dotfiles/system.org")) :which-key "System config")
    "cp" '((lambda() (interactive) (find-file "~/dotfiles/programs.org")) :which-key "Programs config"))
#+end_src
* MU4E EMail Configuration
** Mu4e
  make sure to install mu-git from the AUR (Arch User Repository) and isync from the official Repository.
#+BEGIN_SRC elisp
  (setup mu4e

    (require 'mu4e-org)

    ;; This is set to 't' to avoid mail syncing issues when using mbsync
    (setq mu4e-change-filenames-when-moving t)

    (setq org-capture-templates
	  `(("m" "Email Workflow")
	    ("mf" "Follow Up" entry (file+headline "~/org/Mail.org" "Follow Up")
	     "* TODO %a\n\n  %i")
	    ("mr" "Read Later" entry (file+headline "~/org/Mail.org" "Read Later")
	     "* TODO %a\n\n  %i")))

    ;; Refresh mail using isync every 10 minutes
    (setq mu4e-update-interval (* 10 60))
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-maildir "~/Mail")

    (setq message-kill-buffer-on-exit t)
    (setq mu4e-attachment-dir "~/Downloads")
    (setq mu4e-compose-dont-reply-to-self t)
    (setq mu4e-headers-fields '((:human-date . 20)
				(:flags . 6)
				(:mailing-list . 10)
				(:from . 22)
				(:subject)))
    (setq mu4e-headers-include-related t)
    (setq mu4e-sent-messages-behavior 'delete)
    (setq mu4e-view-show-addresses t)
    (setq mu4e-view-show-images t)
    (setq mm-sign-option 'guided)

    ;; Configure the function to use for sending mail
    (setq message-send-mail-function 'smtpmail-send-it)

    (setq mu4e-contexts
	  (list
	   ;; Personal account
	   (make-mu4e-context
	    :name "Personal"
	    :enter-func (lambda ()
			  (mu4e-message "Entering personal context")
			  (when (string-match-p (buffer-name (current-buffer)) "mu4e-main")
			    (revert-buffer)))
	    :leave-func (lambda ()
			  (mu4e-message "Leaving personal context")
			  (when (string-match-p (buffer-name (current-buffer)) "mu4e-main")
			    (revert-buffer)))
	    :match-func
	    (lambda (msg)
	      (when msg
		(string-prefix-p "/Gmail" (mu4e-message-field msg :maildir))))
	    :vars '((user-mail-address . "x7and7@gmail.com")
		    (user-full-name    . "Haider Mirza")
		    ;; (mu4e-compose-signature . "Haider Mirza via Emacs on a GNU/Linux system")
		    (smtpmail-smtp-server  . "smtp.gmail.com")
		    (smtpmail-smtp-service . 465)
		    (smtpmail-stream-type  . ssl)
		    (mu4e-drafts-folder  . "/Gmail/[Gmail]/Drafts")
		    (mu4e-sent-folder  . "/Gmail/[Gmail]/Sent Mail")
		    (mu4e-refile-folder  . "/Gmail/[Gmail]/All Mail")
		    (mu4e-trash-folder  . "/Gmail/[Gmail]/Trash")))

	   ;; Work account
	   (make-mu4e-context
	    :name "School"
	    :enter-func (lambda ()
			  (mu4e-message "Entering school context")
			  (when (string-match-p (buffer-name (current-buffer)) "mu4e-main")
			    (revert-buffer)))
	    :leave-func (lambda ()
			  (mu4e-message "Leaving school context")
			  (when (string-match-p (buffer-name (current-buffer)) "mu4e-main")
			    (revert-buffer)))
	    :match-func
	    (lambda (msg)
	      (when msg
		(string-prefix-p "/Outlook" (mu4e-message-field msg :maildir))))
	    :vars '((user-mail-address . "ha6mi19@keaston.bham.sch.uk")
		    (user-full-name    . "Haider Mirza")
		    ;;(mu4e-compose-signature . "Haider Mirza via Emacs on a GNU/Linux system")
		    (mu4e-compose-signature . nil) ;; Mu4e signature comes out to be another seperate file.
		    ;; (smtpmail-smtp-server  . "smtp-mail.outlook.com")
		    ;; (smtpmail-smtp-service . 587)
		    ;; (smtpmail-stream-type  . ssl)
		    (mu4e-drafts-folder  . "/Outlook/Drafts")
		    (mu4e-sent-folder  . "/Outlook/Sent")
		    (mu4e-refile-folder  . "/Outlook/Archive")
		    (mu4e-trash-folder  . "/Outlook/Trash")))))

    (add-to-list 'mu4e-bookmarks '("m:/Outlook/INBOX or m:/Gmail/Inbox" "All Inboxes" ?i))

    ;; ;; Sign all of my emails with opengpg keys 
    ;; (setq mml-secure-openpgp-signers '("9EF89A5DC9CCB57E3AC00F2B4441A49825DCD754"))
    ;; (add-hook 'message-send-hook 'mml-secure-message-sign-pgpmime)

    ;; (setq mu4e-context-policy 'pick-first)

    (defun sign-or-encrypt-message ()
      (let ((answer (read-from-minibuffer "Sign or encrypt?\nEmpty to do nothing.\n[s/e]: ")))
	(cond
	 ((string-equal answer "s") (progn
				      (message "Signing message.")
				      (mml-secure-message-sign-pgpmime)))
	 ((string-equal answer "e") (progn
				      (message "Encrypt and signing message.")
				      (mml-secure-message-encrypt-pgpmime)))
	 (t (progn
	      (message "Dont signing or encrypting message.")
	      nil)))))

    (add-hook 'message-send-hook 'sign-or-encrypt-message)

    (setq mu4e-maildir-shortcuts
	  '((:maildir "/Gmail/Inbox"    :key ?g)
	    (:maildir "/Outlook/INBOX"     :key ?i)
	    (:maildir "/Gmail/[Gmail]/Sent Mail" :key ?s)
	    (:maildir "/Outlook/Sent" :key ?S))))

  ;; Make sure plain text mails flow correctly for recipients
  (setq mu4e-compose-format-flowed t)
#+END_SRC

** Mu4e-Alert
#+BEGIN_SRC elisp
  ;; (setup (:pkg mu4e-alert)
  ;;   (mu4e-alert-enable-mode-line-display)
  ;;   (mu4e-alert-set-default-style 'libnotify)
  ;;   (:hook-into after-init-hook mu4e-alert-enable-notifications))
#+END_SRC
** Org-mime
#+BEGIN_SRC elisp
  (setup (:pkg org-mime)
    (setq org-mime-export-options '(:section-numbers nil
						     :with-author nil
						     :with-toc nil)))

  (add-hook 'org-mime-html-hook
	    (lambda ()
	      (org-mime-change-element-style
	       "pre" (format "color: %s; background-color: %s; padding: 0.5em;"
			     "#E6E1DC" "#232323"))))

  (add-hook 'message-send-hook 'org-mime-htmlize)
#+END_SRC
* Development Configuration
** Projectile
#+begin_src elisp
  (setup (:pkg projectile)
    (:with-map
	(:bind projectile-command-map))
    (when (file-directory-p "~/code")
      (setq projectile-project-search-path '("~/code")))
    (setq projectile-switch-project-action #'projectile-find-file))

  (setup (:pkg counsel-projectile)
	       (counsel-projectile-mode))
#+end_src
** YASnippet
 #+begin_src elisp
       (setup (:pkg yasnippet)
	 (yas-global-mode))
      ;;   (setq yas-snippet-dirs '("~/.emacs.d/snippets/"))
      ;;   (yas-reload-all)
      ;;   (:hook-into prog-mode-hook yas-minor-mode)
      ;;   (:hook-into text-mode-hook yas-minor-mode)
      ;;   (yas-global-mode t)
      ;;   (require 'warnings)
      ;;   (add-to-list 'warning-suppress-types '(yasnippet backquote-change)))
 #+end_src
** Magit
 #+BEGIN_SRC elisp
   (setup (:pkg magit))
     ;; (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

   (rune/leader-keys
     "m"  '(:ignore t :which-key "Magit")
     "ms" '(magit-status :which-key "Magit Status"))
 #+END_SRC
** Lsp-mode
#+BEGIN_SRC elisp
  ;; (setup (:pkg lsp-mode
  ;;   :bind (:map lsp-mode-map
  ;; 	      ("TAB" . completion-at-point))
  ;;   :custom
  ;;   (lsp-auto-guess-root nil)
  ;;   (lsp-file-watch-threshold 2000)
  ;;   (read-process-output-max (* 1024 1024))
  ;;   (lsp-eldoc-hook nil)
  ;;   ;; :hook ((c++-mode . lsp)
  ;;   ;; 	 (c-mode . lsp))
  ;;   :commands lsp)

  ;; ;; optionally
  ;; (setup (:pkg lsp-ui
  ;;   :config (lsp-ui-mode))

  ;; (setup (:pkg lsp-treemacs)

  ;; (rune/leader-keys
  ;;   "l"  '(:ignore t :which-key "Lsp Mode")
  ;;   "ld" '(lsp-find-definition :which-key "Find definition"))

#+END_SRC
** Dap-mode
#+BEGIN_SRC elisp

  ;; (setup (:pkg dap-mode)

  ;; ;; Uncomment the config below if you want all UI panes to be hidden by default!
  ;; ;; :custom
  ;; ;; (lsp-enable-dap-auto-configure nil)
  ;; ;; :config
  ;; ;; (dap-ui-mode 1)

  ;; :config
  ;; ;; Set up Node debugging
  ;; (require 'dap-lldb)
  ;; (require 'dap-node)
  ;; (require 'dap-cpptools)
  ;; (require 'dap-gdb-lldb)


  ;; (dap-node-setup) ;; Automatically installs Node debug adapter if needed

  ;; (global-set-key (kbd "C-s-d") 'dap-hydra)
#+END_SRC
** Languages
*** Javascript
I generally don't use Javascript.
#+BEGIN_SRC elisp

  ;; (defun dw/set-js-indentation ()
  ;;   (setq js-indent-level 2)
  ;;   (setq evil-shift-width js-indent-level)
  ;;   (setq-default tab-width 2))

  ;; (setup (:pkg js2-mode
  ;;   :mode "\\.jsx?\\'"
  ;;   :config
  ;;   ;; Use js2-mode for Node scripts
  ;;   (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))

  ;;   ;; Don't use built-in syntax checking
  ;;   (setq js2-mode-show-strict-warnings nil)

  ;;   ;; Set up proper indentation in JavaScript and JSON files
  ;;   (add-hook 'js2-mode-hook #'dw/set-js-indentation)
  ;;   (add-hook 'json-mode-hook #'dw/set-js-indentation))


  ;; (setup (:pkg apheleia
  ;;   :defer 10
  ;;   :config
  ;;   (apheleia-global-mode +1))

  ;; (setup (:pkg prettier-js
  ;;   :defer 10
  ;;   ;; :hook ((js2-mode . prettier-js-mode)
  ;;   ;;        (typescript-mode . prettier-js-mode))
  ;;   :config
  ;;   (setq prettier-js-show-errors nil))

#+END_SRC
*** ELisp
#+BEGIN_SRC elisp
  (rune/leader-keys
    "e"  '(:ignore t :which-key "E-Lisp")
    "el" '(eval-last-sexp :which-key "Evaluate last sexpression")
    "er" '(eval-region :which-key "Evaluate elisp in region"))
#+END_SRC
*** C/C++
I know that ccls is not the best, especially where options like clangd is avalable.
But for now, this is the most I can get working
#+BEGIN_SRC elisp
  ;; (setup (:pkg ccls
  ;;   :defer 5)
#+END_SRC
*** Rust
#+BEGIN_SRC elisp
  ;; (setup (:pkg rustic
  ;;   :ensure
  ;;   :config
  ;;   ;; comment to disable rustfmt on save
  ;;   (setq rustic-format-on-save t)
  ;;   (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

  ;; (defun rk/rustic-mode-hook ()
  ;;   ;; so that run C-c C-c C-r works without having to confirm, but don't try to
  ;;   ;; save rust buffers that are not file visiting. Once
  ;;   ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
  ;;   ;; no longer be necessary.
  ;;   (when buffer-file-name
  ;;     (setq-local buffer-save-without-query t)))

  ;; (setup (:pkg rust-playground :ensure)

  ;; (setup (:pkg toml-mode :ensure)

  ;; (rune/leader-keys
  ;;   "r"  '(:ignore t :which-key "Rust")
  ;;   "rr" 'cargo-process-run)
#+END_SRC
*** Scheme
#+BEGIN_SRC elisp
  (setup (:pkg geiser-guile))
  
  (setup (:pkg geiser)
    (setq geiser-default-implementation 'guile)
    (setq geiser-active-implementations '(guile))
    (setq geiser-repl-default-port 44555) ; For Gambit Scheme
    (setq geiser-implementations-alist '(((regexp "\\.scm$") guile))))

  (rune/leader-keys
  "s"  '(:ignore t :which-key "Scheme")
  "sr" '(run-guile :which-key "Start a REPL"))
#+END_SRC
*** HTML
#+BEGIN_SRC elisp
  ;; (setup (:pkg web-mode
  ;;   :mode "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'"
  ;;   :config
  ;;   (setq-default web-mode-code-indent-offset 2)
  ;;   (setq-default web-mode-markup-indent-offset 2)
  ;;   (setq-default web-mode-attribute-indent-offset 2))

  ;; ;; 1. Start the server with `httpd-start'
  ;; ;; 2. Use `impatient-mode' on any buffer
  ;; (setup (:pkg impatient-mode
  ;;   :defer 5)

  ;; (setup (:pkg skewer-mode
  ;;   :defer 5)

  ;; ;; Run the webserver with command:
  ;; ;; M-x httpd-serve-directory 

  ;; (setup (:pkg simple-httpd
  ;;   :defer 5)

#+END_SRC
*** YAML
#+BEGIN_SRC elisp
  ;; (setup (:pkg yaml-mode
  ;;   :mode "\\.ya?ml\\'")

#+END_SRC
** Smart Parens
#+BEGIN_SRC elisp
  (setup (:pkg smartparens)
    (:hook-into org-mode org-agenda-mode))
#+END_SRC
** Company mode
#+BEGIN_SRC elisp

  (setup (:pkg company))

  (setup (:pkg company-box))

  ;; (use-package company
  ;;   :after lsp-mode
  ;;   :hook (lsp-mode . company-mode)
  ;;   :bind (:map company-active-map
  ;; 	      ("<tab>" . company-complete-selection))
  ;;   (:map lsp-mode-map
  ;; 	("<tab>" . company-indent-or-complete-common))
  ;;   :custom
  ;;   (company-minimum-prefix-length 1)
  ;;   (company-idle-delay 0.0))

  ;; (use-package company-box
  ;;   :hook (company-mode . company-box-mode))

  (defun company-yasnippet-or-completion ()
    (interactive)
    (or (do-yas-expand)
	(company-complete-common)))

  (defun check-expansion ()
    (save-excursion
      (if (looking-at "\\_>") t
	(backward-char 1)
	(if (looking-at "\\.") t
	  (backward-char 1)
	  (if (looking-at "::") t nil)))))

  (defun do-yas-expand ()
    (let ((yas/fallback-behavior 'return-nil))
      (yas/expand)))

  (defun tab-indent-or-complete ()
    (interactive)
    (if (minibufferp)
	(minibuffer-complete)
      (if (or (not yas/minor-mode)
	      (null (do-yas-expand)))
	  (if (check-expansion)
	      (company-complete-common)
	    (indent-for-tab-command)))))
#+END_SRC 
** Flycheck
Flycheck kinda calls everything to be an error. Kind of anoyying (cuz it doesnt understand libraries)
#+BEGIN_SRC elisp
  ;; (setup (:pkg flycheck :ensure)
#+END_SRC
** Tree
   I dont really use these Tree programs and use counsel-recentf or keybinds to switch files quickly instead.
*** Neotree
 The tree directory listing in Emacs.
 #+begin_src elisp
   ;; (setup (:pkg neotree)
   ;; (setq neo-smart-open t
   ;;       neo-window-fixed-size nil)
   ;; (setq doom-neotree-enable-variable-pitch t)
   ;; (rune/leader-keys
   ;;   "n"  '(:ignore t :which-key "Neotree")
   ;;   "nt" '(neotree-toggle :which-key "Toggle neotree in file viewer")
   ;;   "nd" '(neotree-dir :which-key "Open a directory in Neotree"))

 #+end_src
*** Org-Sidebar
 #+BEGIN_SRC elisp
   ;; (setup (:pkg org-sidebar)

   ;; (rune/leader-keys
   ;;   "no" '(org-sidebar-tree :which-key "Tree Org"))

 #+END_SRC
* Terminal Configurations
** Term
#+BEGIN_SRC elisp
  ;; (setup (:pkg term)
  ;;   (setq explicit-shell-file-name "bash") ;; Change this to zsh, etc
  ;;   ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args

  ;;   ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
  ;;   (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

#+END_SRC
** VTerm
#+BEGIN_SRC elisp
   (setup (:pkg vterm)
     (setq vterm-max-scrollback 10000)
     (advice-add 'evil-collection-vterm-insert :before #'vterm-reset-cursor-point))

   (global-set-key (kbd "s-v") 'vterm)
#+END_SRC
*** VTerm-toggle
#+BEGIN_SRC elisp
  ;; (setup (:pkg vterm-toggle)
#+END_SRC
** Eshell
#+BEGIN_SRC elisp
  (rune/leader-keys
  "e"  '(:ignore t :which-key "Eshell")
  "es" '(eshell :which-key "Launch Eshell")
  "eh" '(counsel-esh-history :which-key "Eshell History"))

 #+END_SRC 
* Password Managment
Uses the standard Unix password store "pass".

#+begin_src elisp
  (setup (:pkg password-store))

  (setq epa-pinentry-mode 'loopback)
  
  ;; Used to access passwords through emacs using Emacs's server-mode
  (defun efs/lookup-password (&rest keys)
    (interactive)
    (let ((result (apply #'auth-source-search keys)))
      (if result
	  (funcall (plist-get (car result) :secret))
	nil)))
#+end_src

* Emacs server-mode
#+BEGIN_SRC elisp
  (server-start)
#+END_SRC

* Load Desktop.org
  This loads EXWM and the rest of my system.
#+BEGIN_SRC elisp
  (load-file "~/.emacs.d/desktop.el")
#+END_SRC

* Garbage Collecter Hack
  #+BEGIN_SRC elisp
    ;; Make gc pauses faster by decreasing the threshold.
    (setq gc-cons-threshold (* 2 1000 1000))
  #+END_SRC
