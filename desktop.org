#+TITLE: =Desktop configuration=
#+PROPERTY: header-args:elisp :tangle /home/haider/.emacs.d/desktop.el
#+PROPERTY: header-args:conf :tangle /home/haider/.config/polybar/config
#+AUTHOR: Haider Mirza
* Table of contents :toc:
- [[#about-this-config][About This Config]]
- [[#exwm][EXWM]]
  - [[#window-mangement][Window Mangement]]
  - [[#helper-functions][Helper Functions]]
  - [[#desktop-configuration][Desktop Configuration]]
  - [[#configuration][Configuration]]
  - [[#polybar-panel][Polybar Panel]]
  - [[#use-package][use-package]]
  - [[#keybinds][Keybinds]]
  - [[#launch-applications][Launch Applications]
  - [[#audio-control][Audio Control]]
  - [[#system-functions][System functions]]
- [[#xmodmap][Xmodmap]]
- [[#polybar][Polybar]]
  - [[#emacs][Emacs]]
  - [[#polybar-1][Polybar]]
- [[#xmonad][XMonad]]
  - [[#xmonadhs][Xmonad.hs]]
  - [[#xmobarrc][xmobarrc]]
  - [[#polybar-panel-1][Polybar Panel]]

* About This Config
  This is my desktop configuration for my system.
* EXWM
  EXWM is my Window Manager That I use becuase It fits very well to my workflow and is highly keyboard-based. 
** Window Mangement
#+BEGIN_SRC elisp
  (defun win/position-window-left-corner ()
    (interactive)
    (let* ((pos (frame-position))
	   (pos-x (car pos))
	   (pos-y (cdr pos)))

      (exwm-floating-move (- pos-x) (- pos-y))))

  (defun win/position-window-right-corner ()
    (interactive)
    (let* ((pos (frame-position))
	   (pos-x (car pos))
	   (pos-y (cdr pos)))

      (exwm-floating-move (- (- 1366 (frame-pixel-width)) pos-x) (- pos-y))))

  (defun exwm/exwm-update-class ()
    (exwm-workspace-rename-buffer exwm-class-name))

  (defun exwm/exwm-update-title ()
    (pcase exwm-class-name
      ("qutebrowser" (exwm-workspace-rename-buffer (format "qutebrowser: %s" exwm-title)))
      ("mpv" (exwm-workspace-rename-buffer (format "%s" exwm-title)))))

#+END_SRC 
  
** Helper Functions
#+BEGIN_SRC elisp
  (defun exwm/run-in-background (command)
    (let ((command-parts (split-string command "[ ]+")))
      (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

  (defun exwm/bind-function (key invocation &rest bindings)
    "Bind KEYs to FUNCTIONs globally"
    (while key
      (exwm-input-set-key (kbd key)
			  `(lambda ()
			     (interactive)
			     (funcall ',invocation)))
      (setq key (pop bindings)
	    invocation (pop bindings))))

  (defun exwm/bind-command (key command &rest bindings)
    "Bind KEYs to COMMANDs globally"
    (while key
      (exwm-input-set-key (kbd key)
			  `(lambda ()
			     (interactive)
			     (exwm/run-in-background ,command)))
      (setq key (pop bindings)
	    command (pop bindings))))

#+END_SRC
** Desktop Configuration
   
#+BEGIN_SRC elisp
  (defun exwm/picom ()
    (interactive)
    (start-process-shell-command "picom" nil "picom"))

  ;; Hide The Mouse Cursor
  (defun exwm/unclutter ()
    (interactive)
    (start-process-shell-command "unclutter" nil "unclutter -idle 0.01 -root"))

  (defun exwm/kill-unclutter ()
    (interactive)
    (start-process-shell-command "kill unclutter" nil "pkill unclutter"))

  (defun exwm/run-xmodmap ()
    (interactive)
    (start-process-shell-command "xmodmap" nil "xmodmap ~/.emacs.d/.xmodmap"))

  (defun exwm/set-wallpaper ()
    (interactive)
    (start-process-shell-command
     "feh" nil  "feh --bg-scale ~/Wallpapers/main.png"))

  (defun exwm/configure-desktop ()
    (interactive)
    (exwm/set-wallpaper)
    (exwm/picom)
    (start-process-shell-command "scroll speed" nil "xset r rate 200 30")
    (exwm/startup)
    (message "Post Inititialization script...")
    (sleep-for 8)
    (start-process-shell-command "sound-effect" nil "mpv --no-video /home/haider/do-not-delete/startup.mp3"))

#+END_SRC
** Configuration
   
#+BEGIN_SRC elisp

  (defun exwm/exwm-init-hook ()
    (exwm-workspace-switch-create 1)
    (exwm/unclutter)
    (exwm/configure-desktop)
  (exwm/run-in-background "dunst"))                      ;; Launch Dunst

  (defun exwm/configure-window-by-class ()
    (interactive)
    (pcase exwm-class-name
      ("qutebrowser" (exwm-workspace-move-window 2))
      ("icecat" (exwm-workspace-move-window 2))
      ("blender" (exwm-workspace-move-window 6))
      ("Spinter" (exwm-floating-toggle-floating))
      ("mpv" (exwm-workspace-move-window 3))
      ("Alacritty" (exwm-layout-set-fullscreen))))

  ;; Hide the modeline on all floating windows
  (add-hook 'exwm-floating-setup-hook
            (lambda ()
              (exwm-layout-hide-mode-line)))

#+END_SRC
** Polybar Panel
#+BEGIN_SRC elisp
  (defun poly/polybar-exwm-workspace ()
    (pcase exwm-workspace-current-index
      (0 "Dashboard")
      (1 "Terminal")
      (2 "Web Browser")
      (3 "Videos")
      (4 "Documentation")
      (5 "Development")
      (6 "Blender")
      (7 "Chat")
      (8 "Mu4e")
      (9 "Mocp")))
#+END_SRC
** Initial EXWM Setup
#+BEGIN_SRC elisp
  (require 'desktop-environment)
  (desktop-environment-volume-set "50%")

  (setup (:pkg exwm)
    (setq exwm-workspace-number 9)
    (add-hook 'exwm-update-class-hook #'exwm/exwm-update-class)
    (add-hook 'exwm-update-title-hook #'exwm/exwm-update-title)
    (add-hook 'exwm-manage-finish-hook #'exwm/configure-window-by-class)
    (require 'exwm-systemtray)
    (setq exwm-systemtray-height 16)
    (exwm-systemtray-enable)
    (add-hook 'exwm-init-hook #'exwm/exwm-init-hook)
#+END_SRC
** Keybinds
#+BEGIN_SRC elisp

  (setq exwm-input-prefix-keys
        '(?\C-x
          ?\C-u
          ?\C-h
          ?\M-x
          ?\M-`
          ?\M-&
          ?\s-q
          ?\s-f
          ?\M-:
          ?\C-\M-j  ;; Buffer list
          ?\C-\ ))  ;; Ctrl+Space

  (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

  (setq exwm-input-global-keys
        `(
          ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
          ([?\s-r] . exwm-reset)
          ([?\s-f] . exwm-layout-toggle-fullscreen)
          ([?\s-z] . exwm-layout-toggle-mode-line)
          ([?\s-b] . consult-buffer)
          ([?\s-g] . consult-buffer-other-frame)
          ([\f6] . desktop-environment-toggle-mute)
          ([\f7] . desktop-environment-volume-decrement)
          ([\f8] . desktop-environment-volume-increment)
          ([?\s-x] . exwm-floating-toggle-floating)
          ([?\s-j] . win/position-window-left-corner)
          ([?\s-k] . win/position-window-right-corner)
          ([?\s-m] . exwm/mpv-float)

          ;; Launch applications via shell command
          ([?\s-&] . (lambda (command)
                       (interactive (list (read-shell-command "$ ")))
                       (start-process-shell-command command nil command)))

          ;; Switch workspace
          ([?\s-w] . exwm-workspace-switch)

          ([?\s-E] . (lambda () (interactive) (dired "~")))
          ([?\s-Q] . (lambda () (interactive) (kill-buffer)))

          ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
          ,@(mapcar (lambda (i)
                      `(,(kbd (format "s-%d" i)) .
                        (lambda ()
                          (interactive)
                          (exwm-workspace-switch-create ,i))))
                    (number-sequence 0 9))))

  (exwm-enable))

#+END_SRC
** Functions
EXWM Functions
*** Launch Applications
#+BEGIN_SRC elisp
  (defun exwm/run-qute ()
    (interactive)
    (exwm/run-in-background "qutebrowser --qt-flag disable-seccomp-filter-sandbox")
    (start-process-shell-command "dunst" nil "dunstify \"Launching Qutebrowser...\"")
    (exwm-workspace-switch-create 2))

  (defun exwm/run-icecat ()
    (exwm/run-in-background "icecat")
    (start-process-shell-command "dunst" nil "dunstify \"Launching Icecat...\"")
    (exwm-workspace-switch-create 2))

  (defun exwm/run-alacritty ()
    (exwm/run-in-background "alacritty")
    (start-process-shell-command "dunst" nil "dunstify \"Launching Alacritty...\""))

  (defun exwm/run-mocp ()
    (exwm/run-in-background "alacritty -e mocp")
    (start-process-shell-command "dunst" nil "dunstify \"Launching Mocp...\"")
    (exwm-workspace-switch-create 9))

  (defun exwm/run-mpv ()
    (exwm/run-in-background "mpv")
    (start-process-shell-command "dunst" nil "dunstify \"Launching MPV...\"")
    (exwm-workspace-switch-create 3))

  (defun exwm/mpv-float ()
    (interactive)
    (exwm-floating-toggle-floating)
    (exwm-layout-shrink-window 516)
    (exwm-layout-shrink-window-horizontally 960))

  (defun exwm/run-blen ()
    (exwm/run-in-background "blender")
    (start-process-shell-command "dunst" nil "dunstify \"Launching Blender...\"")
    (exwm-workspace-switch-create 6))

  (defun exwm/run-snip ()
    (exwm/run-in-background "flameshot")
    (start-process-shell-command "dunst" nil "dunstify \"Launching Flameshot...\""))

  (defun exwm/run-slock ()
    (interactive)
    (start-process-shell-command "slock" nil "slock"))

  (defun exwm/run-rofi ()
    (interactive)
    (start-process-shell-command "rofi" nil "rofi -show drun"))

  (exwm/bind-function
   "s-SPC" 'exwm/run-rofi
   "M-s-b" 'exwm/run-qute
   "M-s-f" 'exwm/run-icecat
   "M-s-m" 'exwm/run-mocp
   "s-t" 'exwm/run-alacritty
   "M-s-v" 'exwm/run-mpv
   "C-s-b" 'exwm/run-blen
   "s-l" 'exwm/run-slock
   "s-s" 'exwm/run-snip
   "s-q" 'kill-buffer)
#+END_SRC
*** Startup script
#+BEGIN_SRC elisp
  (defun exwm/startup ()
    (interactive)
    (exwm/run-xmodmap)
    (start-process-shell-command "dunst" nil "dunstify Progress: -h int:value:16")
    (exwm-workspace-switch-create 0)
    (start-process-shell-command "btop" nil "alacritty -e btop")
    (sleep-for 1)
    (start-process-shell-command "dunst" nil "dunstify Progress: -h int:value:32")
    (exwm-workspace-switch-create 1)
    (vterm)
    (start-process-shell-command "dunst" nil "dunstify Progress: -h int:value:50")
    (sleep-for 1)
    (exwm-workspace-switch-create 8)
    (notmuch)
    (start-process-shell-command "dunst" nil "dunstify Progress: -h int:value:66")
    (sleep-for 1)
    (exwm-workspace-switch-create 9)
    (start-process-shell-command "pulsemixer" nil "alacritty -e pulsemixer")
    (start-process-shell-command "dunst" nil "dunstify Progress: -h int:value:82")
    (sleep-for 1)
    (exwm-workspace-switch-create 2)
    (exwm/run-qute)
    (start-process-shell-command "dunst" nil "dunstify Progress: -h int:value:100"))

#+END_SRC
*** System functions
#+BEGIN_SRC elisp
  (defun shutdown ()
    (interactive)
    (shell-command (concat "echo " (shell-quote-argument (read-passwd "Password: "))
			   " | sudo -S shutdown")))

  (defun reboot ()
    (interactive)
    (shell-command (concat "echo " (shell-quote-argument (read-passwd "Password: "))
			   " | sudo -S reboot")))
#+END_SRC
* Xmodmap
Rekeybind *Ctrl* to *Caps-lock* 
#+BEGIN_SRC fundamental :tangle "/home/haider/.emacs.d/.xmodmap"
  clear lock
  clear control
  keycode 66 = Control_L
  add control = Control_L
  add Lock = Control_R
#+END_SRC
* Polybar
** Emacs 
   Custom Polybar code for control in Emacs.
#+BEGIN_SRC elisp
  (defvar poly/polybar-process nil
    "Holds the process of the running Polybar instance, if any")

  (defun poly/kill-panel ()
    (interactive)
    (when poly/polybar-process
      (ignore-errors
	(kill-process poly/polybar-process)))
    (setq poly/polybar-process nil))

  (defun poly/start-panel ()
    (interactive)
    (poly/kill-panel)
    (setq poly/polybar-process (start-process-shell-command "polybar" nil "polybar panel")))

  (defun poly/send-polybar-hook (module-name hook-index)
    (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))

  (defun poly/send-polybar-exwm-workspace ()
    (poly/send-polybar-hook "exwm-workspace" 1))

  ;; Update panel indicator when workspace changes
  (add-hook 'exwm-workspace-switch-hook #'poly/send-polybar-exwm-workspace)

 #+END_SRC
** Polybar
   My Polybar config
   
#+BEGIN_SRC conf

; Docs: https://github.com/polybar/polybar
;==========================================================

[settings]
screenchange-reload = true

[global/wm]
margin-top = 0
margin-bottom = 0

[colors]
background = #1D2026
background-alt = #282C34
foreground = #A6Accd
foreground-alt = #555
primary = #ffb52a
secondary = #e60053
alert = #bd2c40
underline-1 = #51AFEF

[bar/panel]
width = 100%
height = 17
offset-x = 0
offset-y = 0
fixed-center = true
enable-ipc = true

background = ${colors.background}
foreground = ${colors.foreground}

line-size = 2
line-color = #f00

border-size = 0
border-color = #00000000

padding-top = 5
padding-left = 1
padding-right = 1

module-margin-left = 5

font-0 = "Cantarell:size=8:weight=bold;2"
font-1 = "Font Awesome:size=6;2"
font-2 = "Material Icons:size=9;5"
font-3 = "Fira Mono:size=5;-3"

modules-left = exwm-workspace title
modules-right = cpu memory date

tray-position = right
tray-padding = 2
tray-maxsize = 28

cursor-click = pointer
cursor-scroll = ns-resize

[module/exwm-workspace]
type = custom/ipc
hook-0 = emacsclient -e "(poly/polybar-exwm-workspace)" | sed -e 's/^"//' -e 's/"$//'
initial = 1
format-underline = ${colors.underline-1}
format-padding = 1

[module/cpu]
type = internal/cpu
interval = 2
format = <label>
format-underline = ${colors.underline-1}
click-left = emacsclient -e "(proced)"
label = CPU %percentage%%

[module/memory]
type = internal/memory
interval = 3
format = <bar-used>
bar-used-indicator =
bar-used-width = 30
bar-used-foreground-0 = #55aa55
bar-used-foreground-1 = #557755
bar-used-foreground-2 = #f5a70a
bar-used-foreground-3 = #ff5555
bar-used-fill = ▐
bar-used-empty = ▐
format-underline = ${colors.underline-1}
bar-used-empty-foreground = #444444

[module/date]
type = internal/date
interval = 1
date = "%A %B %d %Y"
time = %l:%M:%S %p
format-prefix-foreground = ${colors.foreground-alt}
format-underline = ${colors.underline-1}
label = %date% %time%

[module/title]
type = internal/xwindow
format = <label>
format-foreground = #98BE65
format-padding = 4
label = %title%
label-empty = Empty
label-empty-foreground = #707880
   #+END_SRC
* XMonad
** Xmonad.hs
   This is a alternative desktop environment I had used previous to EXWM.
   This was a edited version of Distrotube's desktop environment.
 #+BEGIN_SRC haskell
   -- Base
   import XMonad
   import System.Directory
   import System.IO (hPutStrLn)
   import System.Exit (exitSuccess)
   import qualified XMonad.StackSet as W

       -- Actions
   import XMonad.Actions.CopyWindow (kill1)
   import XMonad.Actions.CycleWS (Direction1D(..), moveTo, shiftTo, WSType(..), nextScreen, prevScreen)
   import XMonad.Actions.GridSelect
   import XMonad.Actions.MouseResize
   import XMonad.Actions.Promote
   import XMonad.Actions.RotSlaves (rotSlavesDown, rotAllDown)
   import XMonad.Actions.WindowGo (runOrRaise)
   import XMonad.Actions.WithAll (sinkAll, killAll)
   import qualified XMonad.Actions.Search as S

       -- Data
   import Data.Char (isSpace, toUpper)
   import Data.Maybe (fromJust)
   import Data.Monoid
   import Data.Maybe (isJust)
   import Data.Tree
   import qualified Data.Map as M

       -- Hooks
   import XMonad.Hooks.DynamicLog (dynamicLogWithPP, wrap, xmobarPP, xmobarColor, shorten, PP(..))
   import XMonad.Hooks.EwmhDesktops  -- for some fullscreen events, also for xcomposite in obs.
   import XMonad.Hooks.ManageDocks (avoidStruts, docksEventHook, manageDocks, ToggleStruts(..))
   import XMonad.Hooks.ManageHelpers (isFullscreen, doFullFloat, doCenterFloat)
   import XMonad.Hooks.ServerMode
   import XMonad.Hooks.SetWMName
   import XMonad.Hooks.WorkspaceHistory

       -- Layouts
   import XMonad.Layout.Accordion
   import XMonad.Layout.GridVariants (Grid(Grid))
   import XMonad.Layout.SimplestFloat
   import XMonad.Layout.Spiral
   import XMonad.Layout.ResizableTile
   import XMonad.Layout.Tabbed
   import XMonad.Layout.ThreeColumns

       -- Layouts modifiers
   import XMonad.Layout.LayoutModifier
   import XMonad.Layout.LimitWindows (limitWindows, increaseLimit, decreaseLimit)
   import XMonad.Layout.Magnifier
   import XMonad.Layout.MultiToggle (mkToggle, single, EOT(EOT), (??))
   import XMonad.Layout.MultiToggle.Instances (StdTransformers(NBFULL, MIRROR, NOBORDERS))
   import XMonad.Layout.NoBorders
   import XMonad.Layout.Renamed
   import XMonad.Layout.ShowWName
   import XMonad.Layout.Simplest
   import XMonad.Layout.Spacing
   import XMonad.Layout.SubLayouts
   import XMonad.Layout.WindowArranger (windowArrange, WindowArrangerMsg(..))
   import XMonad.Layout.WindowNavigation
   import qualified XMonad.Layout.ToggleLayouts as T (toggleLayouts, ToggleLayout(Toggle))
   import qualified XMonad.Layout.MultiToggle as MT (Toggle(..))

      -- Utilities
   import XMonad.Util.Dmenu
   import XMonad.Util.EZConfig (additionalKeysP)
   import XMonad.Util.NamedScratchpad
   import XMonad.Util.Run (runProcessWithInput, safeSpawn, spawnPipe)
   import XMonad.Util.SpawnOnce

   myFont :: String
   myFont = "xft:SauceCodePro Nerd Font Mono:regular:size=9:antialias=true:hinting=true"

   myModMask :: KeyMask
   myModMask = mod4Mask        -- Sets modkey to super/windows key

   myTerminal :: String
     myTerminal = "alacritty"    -- Sets default terminal

   myAppdir :: String
   myAppdir = "~/Appimages/"    -- Directory of Appimages

   myBrowser :: String
   myBrowser = "qutebrowser "  -- Sets qutebrowser as browser

   myFileManager :: String
   myFileManager = "pcmanfm"  -- Sets pcmanfm as file manager

   myEmacs :: String
   myEmacs = "emacsclient -c -a 'emacs' "  -- Makes emacs keybindings easier to type

   myEditor :: String
   myEditor = "emacsclient -c -a 'emacs' "  -- Sets emacs as editor
   -- myEditor = myTerminal ++ " -e vim "    -- Sets vim as editor

   myBorderWidth :: Dimension
   myBorderWidth = 2           -- Sets border width for windows

   myNormColor :: String
   myNormColor   = "#282c34"   -- Border color of normal windows

   myFocusColor :: String
   myFocusColor  = "#46d9ff"   -- Border color of focused windows

   windowCount :: X (Maybe String)
   windowCount = gets $ Just . show . length . W.integrate' . W.stack . W.workspace . W.current . windowset

   myStartupHook :: X ()
   myStartupHook = do
       spawnOnce "lxsession &"
       -- spawnOnce "picom &"
       spawnOnce "dunst &"
       -- spawnOnce "nm-applet &"
       spawnOnce "volumeicon &"
       spawnOnce "xmodmap ~/.xmodmap"
       spawnOnce "trayer --edge top --align right --widthtype request --padding 6 --SetDockType true --SetPartialStrut true --expand true --monitor 1 --transparent true --alpha 0 --tint 0x282c34  --height 22 &"
       spawnOnce "/usr/bin/emacs --daemon &" -- emacs daemon for the emacsclient
       -- spawnOnce "xargs xwallpaper --stretch < ~/.cache/wall"

       -- spawnOnce "~/.fehbg &"  -- set last saved feh wallpaper
       -- spawnOnce "feh --randomize --bg-fill ~/repos/Wallpapers/*"  -- feh set random wallpaper
       spawnOnce "feh --bg-fill ~/repos/Wallpapers/Main.png"  -- feh set random wallpaper
       -- spawnOnce "nitrogen --restore &"   -- if you prefer nitrogen to feh
       setWMName "LG3D"

   myColorizer :: Window -> Bool -> X (String, String)
   myColorizer = colorRangeFromClassName
		     (0x28,0x2c,0x34) -- lowest inactive bg
		     (0x28,0x2c,0x34) -- highest inactive bg
		     (0xc7,0x92,0xea) -- active bg
		     (0xc0,0xa7,0x9a) -- inactive fg
		     (0x28,0x2c,0x34) -- active fg

   -- gridSelect menu layout
   mygridConfig :: p -> GSConfig Window
   mygridConfig colorizer = (buildDefaultGSConfig myColorizer)
       { gs_cellheight   = 40
       , gs_cellwidth    = 200


       , gs_cellpadding  = 6
       , gs_originFractX = 0.5
       , gs_originFractY = 0.5
       , gs_font         = myFont
       }

   spawnSelected' :: [(String, String)] -> X ()
   spawnSelected' lst = gridselect conf lst >>= flip whenJust spawn
       where conf = def
		      { gs_cellheight   = 40
		      , gs_cellwidth    = 200
		      , gs_cellpadding  = 6
		      , gs_originFractX = 0.5
		      , gs_originFractY = 0.5
		      , gs_font         = myFont
		      }

   myAppGrid = [ ("Lunarclient", "lunarclient")
		    , ("Deadbeef", "deadbeef")
		    , ("Emacs", "emacsclient -c -a emacs")
		    , ("Firefox", "firefox")
		    , ("Gimp", "gimp")
		    , ("Kdenlive", "kdenlive")
		    , ("OBS", "obs")
		    , ("Thunar", "thunar")
		    ]

   myScratchPads :: [NamedScratchpad]
   myScratchPads = [ NS "terminal" spawnTerm findTerm manageTerm
		   , NS "mocp" spawnMocp findMocp manageMocp
		   , NS "calculator" spawnCalc findCalc manageCalc
		   ]
     where
       spawnTerm  = myTerminal ++ " -t scratchpad"
       findTerm   = title =? "scratchpad"
       manageTerm = customFloating $ W.RationalRect l t w h
		  where
		    h = 0.9
		    w = 0.9
		    t = 0.95 -h
		    l = 0.95 -w
       spawnMocp  = myTerminal ++ " -t mocp -e mocp"
       findMocp   = title =? "mocp"
       manageMocp = customFloating $ W.RationalRect l t w h
		  where
		    h = 0.9
		    w = 0.9
		    t = 0.95 -h
		    l = 0.95 -w
       spawnCalc  = "qalculate-gtk"
       findCalc   = className =? "Qalculate-gtk"
       manageCalc = customFloating $ W.RationalRect l t w h
		  where
		    h = 0.5
		    w = 0.4
		    t = 0.75 -h
		    l = 0.70 -w

   --Makes setting the spacingRaw simpler to write. The spacingRaw module adds a configurable amount of space around windows.
   mySpacing :: Integer -> l a -> XMonad.Layout.LayoutModifier.ModifiedLayout Spacing l a
   mySpacing i = spacingRaw False (Border i i i i) True (Border i i i i) True

   -- Below is a variation of the above except no borders are applied
   -- if fewer than two windows. So a single window has no gaps.
   mySpacing' :: Integer -> l a -> XMonad.Layout.LayoutModifier.ModifiedLayout Spacing l a
   mySpacing' i = spacingRaw True (Border i i i i) True (Border i i i i) True

   -- Defining a bunch of layouts, many that I don't use.
   -- limitWindows n sets maximum number of windows displayed for layout.
   -- mySpacing n sets the gap size around the windows.
   tall     = renamed [Replace "tall"]
	      $ smartBorders
	      $ windowNavigation
	      $ addTabs shrinkText myTabTheme
	      $ subLayout [] (smartBorders Simplest)
	      $ limitWindows 12
	      $ mySpacing 8
	      $ ResizableTall 1 (3/100) (1/2) []
   magnify  = renamed [Replace "magnify"]
	      $ smartBorders
	      $ windowNavigation
	      $ addTabs shrinkText myTabTheme
	      $ subLayout [] (smartBorders Simplest)
	      $ magnifier
	      $ limitWindows 12
	      $ mySpacing 8
	      $ ResizableTall 1 (3/100) (1/2) []
   monocle  = renamed [Replace "monocle"]
	      $ smartBorders
	      $ windowNavigation
	      $ addTabs shrinkText myTabTheme
	      $ subLayout [] (smartBorders Simplest)
	      $ limitWindows 20 Full
   floats   = renamed [Replace "floats"]
	      $ smartBorders
	      $ limitWindows 20 simplestFloat
   grid     = renamed [Replace "grid"]
	      $ smartBorders
	      $ windowNavigation
	      $ addTabs shrinkText myTabTheme
	      $ subLayout [] (smartBorders Simplest)
	      $ limitWindows 12
	      $ mySpacing 8
	      $ mkToggle (single MIRROR)
	      $ Grid (16/10)
   spirals  = renamed [Replace "spirals"]
	      $ smartBorders
	      $ windowNavigation
	      $ addTabs shrinkText myTabTheme
	      $ subLayout [] (smartBorders Simplest)
	      $ mySpacing' 8
	      $ spiral (6/7)
   threeCol = renamed [Replace "threeCol"]
	      $ smartBorders
	      $ windowNavigation
	      $ addTabs shrinkText myTabTheme
	      $ subLayout [] (smartBorders Simplest)
	      $ limitWindows 7
	      $ ThreeCol 1 (3/100) (1/2)
   threeRow = renamed [Replace "threeRow"]
	      $ smartBorders
	      $ windowNavigation
	      $ addTabs shrinkText myTabTheme
	      $ subLayout [] (smartBorders Simplest)
	      $ limitWindows 7
	      -- Mirror takes a layout and rotates it by 90 degrees.
	      -- So we are applying Mirror to the ThreeCol layout.
	      $ Mirror
	      $ ThreeCol 1 (3/100) (1/2)
   tabs     = renamed [Replace "tabs"]
	      -- I cannot add spacing to this layout because it will
	      -- add spacing between window and tabs which looks bad.
	      $ tabbed shrinkText myTabTheme
   tallAccordion  = renamed [Replace "tallAccordion"]
	      $ Accordion
   wideAccordion  = renamed [Replace "wideAccordion"]
	      $ Mirror Accordion

   -- setting colors for tabs layout and tabs sublayout.
   myTabTheme = def { fontName            = myFont
		    , activeColor         = "#46d9ff"
		    , inactiveColor       = "#313846"
		    , activeBorderColor   = "#46d9ff"
		    , inactiveBorderColor = "#282c34"
		    , activeTextColor     = "#282c34"
		    , inactiveTextColor   = "#d0d0d0"
		    }

   -- Theme for showWName which prints current workspace when you change workspaces.
   myShowWNameTheme :: SWNConfig
   myShowWNameTheme = def
       { swn_font              = "xft:Ubuntu:bold:size=60"
       , swn_fade              = 1.0
       , swn_bgcolor           = "#1c1f24"
       , swn_color             = "#ffffff"
       }

   -- The layout hook
   myLayoutHook = avoidStruts $ mouseResize $ windowArrange $ T.toggleLayouts floats
		  $ mkToggle (NBFULL ?? NOBORDERS ?? EOT) myDefaultLayout
		where
		  myDefaultLayout =     withBorder myBorderWidth tall
				    ||| magnify
				    ||| noBorders monocle
				    ||| floats
				    ||| noBorders tabs
				    ||| grid
				    ||| spirals
				    ||| threeCol
				    ||| threeRow
				    ||| tallAccordion
				    ||| wideAccordion

   -- myWorkspaces = [" 1 ", " 2 ", " 3 ", " 4 ", " 5 ", " 6 ", " 7 ", " 8 ", " 9 "]
   myWorkspaces = [" cmd ", " www ", " mpv ", " doc ", " dev ", " file ", " mc ", " ble ", " prod "]
   myWorkspaceIndices = M.fromList $ zipWith (,) myWorkspaces [1..] -- (,) == \x y -> (x,y)

   clickable ws = "<action=xdotool key super+"++show i++">"++ws++"</action>"
       where i = fromJust $ M.lookup ws myWorkspaceIndices

   myManageHook :: XMonad.Query (Data.Monoid.Endo WindowSet)
   myManageHook = composeAll
	-- 'doFloat' forces a window to float.  Useful for dialog boxes and such.
	-- using 'doShift ( myWorkspaces !! 7)' sends program to workspace 8!
	-- I'm doing it this way because otherwise I would have to write out the full
	-- name of my workspaces and the names would be very long if using clickable workspaces.
	[ className =? "confirm"         --> doFloat
	, className =? "file_progress"   --> doFloat
	, className =? "dialog"          --> doFloat
	, className =? "download"        --> doFloat
	, className =? "error"           --> doFloat
	, className =? "Gimp"            --> doFloat
	, className =? "notification"    --> doFloat
	, className =? "pinentry-gtk-2"  --> doFloat
	, className =? "splash"          --> doFloat
	, className =? "toolbar"         --> doFloat
	, className =? "Yad"             --> doCenterFloat
	, title =? "Oracle VM VirtualBox Manager"  --> doFloat
	, title =? "Mozilla Firefox"     --> doShift ( myWorkspaces !! 1 )
	, className =? "Brave-browser"   --> doShift ( myWorkspaces !! 1 )
	, className =? "qutebrowser"   --> doShift ( myWorkspaces !! 1 )
	, className =? "element-desktop"   --> doShift ( myWorkspaces !! 1 )
	, className =? "kdenlive"   --> doShift ( myWorkspaces !! 8 )
	, className =? "obs"   --> doShift ( myWorkspaces !! 8 )
	, className =? "Blender"   --> doShift ( myWorkspaces !! 7 )
	, className =? "mpv"             --> doShift ( myWorkspaces !! 2 )
	, className =? "discord"             --> doShift ( myWorkspaces !! 2 )
	, className =? "Gimp"            --> doShift ( myWorkspaces !! 8 )
	, className =? "VirtualBox Manager" --> doShift  ( myWorkspaces !! 4 )
	, (className =? "firefox" <&&> resource =? "Dialog") --> doFloat  -- Float Firefox Dialog
	, isFullscreen -->  doFullFloat
	] <+> namedScratchpadManageHook myScratchPads

   -- START_KEYS
   myKeys :: [(String, X ())]
   myKeys =
       -- KB_GROUP Xmonad
	   [ ("M-C-r", spawn "xmonad --recompile")  -- Recompiles xmonad
	   , ("M-S-r", spawn "xmonad --restart")    -- Restarts xmonad
	   , ("M-S-q", io exitSuccess)              -- Quits xmonad
	   , ("M-S-/", spawn "~/.xmonad/xmonad_keys.sh")

       -- KB_GROUP Run Prompt
	   , ("M-S-<Return>", spawn "dmenu_run -i -p \"Run: \"") -- Dmenu

       -- KB_GROUP Other Dmenu Prompts
       -- In Xmonad and many tiling window managers, M-p is the default keybinding to
       -- launch dmenu_run, so I've decided to use M-p plus KEY for these dmenu scripts.
	   , ("M-p h", spawn "dm-hub")       -- allows access to all dmscripts
	   , ("M-p a", spawn "dm-sounds")    -- choose an ambient background
	   , ("M-p b", spawn "dm-setbg")     -- set a background
	   , ("M-p c", spawn "dm-colpick")   -- pick color from our scheme
	   , ("M-p e", spawn "dm-confedit")  -- edit config files
	   , ("M-p i", spawn "dm-maim")      -- screenshots (images)
	   , ("M-p k", spawn "dm-kill")      -- kill processes
	   , ("M-p m", spawn "dm-man")       -- manpages
	   , ("M-p n", spawn "dm-note")      -- store one-line notes and copy them
	   , ("M-p o", spawn "dm-bookman")   -- qutebrowser bookmarks/history
	   , ("M-p p", spawn "passmenu")     -- passmenu
	   , ("M-p q", spawn "dm-logout")    -- logout menu
	   , ("M-p r", spawn "dm-reddit")    -- reddio (a reddit viewer)
	   , ("M-p s", spawn "dm-websearch") -- search various search engines
	   , ("M-p t", spawn "dm-translate") -- translate text (Google Translate)

       -- KB_GROUP Useful programs to have a keybinding for launch
	   , ("M-<Return>", spawn (myTerminal))
	   , ("M-b", spawn (myBrowser))
	   , ("M-M1-t", spawn (myFileManager))
	   , ("M-M1-h", spawn (myTerminal ++ " -e htop"))

       -- KB_GROUP HM-Scripts
	   , ("M-h h", spawn "HM-Hub") -- launches HM-Scripts Hub
	   , ("M-h a", spawn "HM-AppImages") -- launches Appimages launcher
	   , ("M-h s", spawn "HM-SymLink") -- launches Symbolic links creator
	   , ("M-h u", spawn "HM-ScriptUpdate") -- launches Scripts updator
	   , ("M-h g", spawn "HM-Git-Update") -- launches Git updater
	   , ("M-h c", spawn "HM-Configs") -- launches Config Editor
	   , ("M-h d", spawn "HM-OpenDocs") -- launches Document Editor
	   , ("M-h n", spawn "HM-mp4toNokia-Dmenu") -- launches mp4 to nokia (3gp format) converter
	   -- There is a terminal version of "HM-mp4toNokia-Dmenu" called "HM-mp4toNokia-Term" if you want to see progress

       -- KB_GROUP Kill windows
	   , ("M-S-c", kill1)     -- Kill the currently focused client
	   , ("M-S-a", killAll)   -- Kill all windows on current workspace

       -- KB_GROUP Workspaces
	   , ("M-.", nextScreen)  -- Switch focus to next monitor
	   , ("M-,", prevScreen)  -- Switch focus to prev monitor
	   , ("M-S-<KP_Add>", shiftTo Next nonNSP >> moveTo Next nonNSP)       -- Shifts focused window to next ws
	   , ("M-S-<KP_Subtract>", shiftTo Prev nonNSP >> moveTo Prev nonNSP)  -- Shifts focused window to prev ws

       -- KB_GROUP Floating windows
	   , ("M-f", sendMessage (T.Toggle "floats")) -- Toggles my 'floats' layout
	   , ("M-t", withFocused $ windows . W.sink)  -- Push floating window back to tile
	   , ("M-S-t", sinkAll)                       -- Push ALL floating windows to tile

       -- KB_GROUP Increase/decrease spacing (gaps)
	   , ("C-M1-j", decWindowSpacing 4)         -- Decrease window spacing
	   , ("C-M1-k", incWindowSpacing 4)         -- Increase window spacing
	   , ("C-M1-h", decScreenSpacing 4)         -- Decrease screen spacing
	   , ("C-M1-l", incScreenSpacing 4)         -- Increase screen spacing

       -- KB_GROUP Grid Select (CTR-g followed by a key)
	   , ("C-g g", spawnSelected' myAppGrid)                 -- grid select favorite apps
	   , ("C-g t", goToSelected $ mygridConfig myColorizer)  -- goto selected window
	   , ("C-g b", bringSelected $ mygridConfig myColorizer) -- bring selected window

       -- KB_GROUP Windows navigation
	   , ("M-m", windows W.focusMaster)  -- Move focus to the master window
	   , ("M-j", windows W.focusDown)    -- Move focus to the next window
	   , ("M-k", windows W.focusUp)      -- Move focus to the prev window
	   , ("M-S-m", windows W.swapMaster) -- Swap the focused window and the master window
	   , ("M-S-j", windows W.swapDown)   -- Swap focused window with next window
	   , ("M-S-k", windows W.swapUp)     -- Swap focused window with prev window
	   , ("M-<Backspace>", promote)      -- Moves focused window to master, others maintain order
	   , ("M-S-<Tab>", rotSlavesDown)    -- Rotate all windows except master and keep focus in place
	   , ("M-C-<Tab>", rotAllDown)       -- Rotate all the windows in the current stack

       -- KB_GROUP Layouts
	   , ("M-<Tab>", sendMessage NextLayout)           -- Switch to next layout
	   , ("M-<Space>", sendMessage (MT.Toggle NBFULL) >> sendMessage ToggleStruts) -- Toggles noborder/full

       -- KB_GROUP Increase/decrease windows in the master pane or the stack
	   , ("M-S-<Up>", sendMessage (IncMasterN 1))      -- Increase # of clients master pane
	   , ("M-S-<Down>", sendMessage (IncMasterN (-1))) -- Decrease # of clients master pane
	   , ("M-C-<Up>", increaseLimit)                   -- Increase # of windows
	   , ("M-C-<Down>", decreaseLimit)                 -- Decrease # of windows

       -- KB_GROUP Window resizing
	   , ("M-h", sendMessage Shrink)                   -- Shrink horiz window width
	   , ("M-l", sendMessage Expand)                   -- Expand horiz window width
	   , ("M-M1-j", sendMessage MirrorShrink)          -- Shrink vert window width
	   , ("M-M1-k", sendMessage MirrorExpand)          -- Expand vert window width

       -- KB_GROUP Sublayouts
       -- This is used to push windows to tabbed sublayouts, or pull them out of it.
	   , ("M-C-h", sendMessage $ pullGroup L)
	   , ("M-C-l", sendMessage $ pullGroup R)
	   , ("M-C-k", sendMessage $ pullGroup U)
	   , ("M-C-j", sendMessage $ pullGroup D)
	   , ("M-C-m", withFocused (sendMessage . MergeAll))
	   -- , ("M-C-u", withFocused (sendMessage . UnMerge))
	   , ("M-C-/", withFocused (sendMessage . UnMergeAll))
	   , ("M-C-.", onGroup W.focusUp')    -- Switch focus to next tab
	   , ("M-C-,", onGroup W.focusDown')  -- Switch focus to prev tab

       -- KB_GROUP Scratchpads
       -- Toggle show/hide these programs.  They run on a hidden workspace.
       -- When you toggle them to show, it brings them to your current workspace.
       -- Toggle them to hide and it sends them back to hidden workspace (NSP).
	   , ("M-s t", namedScratchpadAction myScratchPads "terminal")
	   , ("M-s m", namedScratchpadAction myScratchPads "mocp")
	   , ("M-s c", namedScratchpadAction myScratchPads "calculator")

       -- KB_GROUP Controls for mocp music player (SUPER-u followed by a key)
	   , ("M-u p", spawn "mocp --play")
	   , ("M-u l", spawn "mocp --next")
	   , ("M-u h", spawn "mocp --previous")
	   , ("M-u <Space>", spawn "mocp --toggle-pause")

       -- KB_GROUP Emacs (CTRL-e followed by a key)
	 --  , ("C-e e", spawn (myEmacs ++ ("--eval '(dashboard-refresh-buffer)'")))   -- emacs dashboard
	     , ("C-e e", spawn (myEmacs))   -- emacs dashboard
	 --  , ("C-e b", spawn (myEmacs ++ ("--eval '(ibuffer)'")))   -- list buffers
	 --  , ("C-e d", spawn (myEmacs ++ ("--eval '(dired nil)'"))) -- dired
	 --  , ("C-e i", spawn (myEmacs ++ ("--eval '(erc)'")))       -- erc irc client
	 --  , ("C-e n", spawn (myEmacs ++ ("--eval '(elfeed)'")))    -- elfeed rss
	 --  , ("C-e s", spawn (myEmacs ++ ("--eval '(eshell)'")))    -- eshell
	 --  , ("C-e t", spawn (myEmacs ++ ("--eval '(mastodon)'")))  -- mastodon.el
	 --  , ("C-e v", spawn (myEmacs ++ ("--eval '(+vterm/here nil)'"))) -- vterm if on Doom Emacs
	 --  , ("C-e w", spawn (myEmacs ++ ("--eval '(doom/window-maximize-buffer(eww \"distro.tube\"))'"))) -- eww browser if on Doom Emacs
	 --  , ("C-e a", spawn (myEmacs ++ ("--eval '(emms)' --eval '(emms-play-directory-tree \"~/Music/\")'")))

       -- KB_GROUP Multimedia Keys
	   , ("<XF86AudioPlay>", spawn "mocp --play")
	   , ("<XF86AudioPrev>", spawn "mocp --previous")
	   , ("<XF86AudioNext>", spawn "mocp --next")
	   , ("<XF86AudioMute>", spawn "amixer set Master toggle")
	   , ("<XF86AudioLowerVolume>", spawn "amixer set Master 5%- unmute")
	   , ("<XF86AudioRaiseVolume>", spawn "amixer set Master 5%+ unmute")
	   , ("<XF86HomePage>", spawn "qutebrowser www.haider.gq")
	   , ("<XF86Search>", spawn "dm-websearch")
	   , ("<XF86Mail>", runOrRaise "thunderbird" (resource =? "thunderbird"))
	   , ("<XF86Calculator>", runOrRaise "qalculate-gtk" (resource =? "qalculate-gtk"))
	   , ("<XF86Eject>", spawn "toggleeject")
	   , ("<Print>", spawn "dm-maim")
	   ]

       -- The following lines are needed for named scratchpads.
	     where nonNSP          = WSIs (return (\ws -> W.tag ws /= "NSP"))
		   nonEmptyNonNSP  = WSIs (return (\ws -> isJust (W.stack ws) && W.tag ws /= "NSP"))
   -- END_KEYS

   main :: IO ()
   main = do
       -- Launching three instances of xmobar on their monitors.
       xmproc0 <- spawnPipe "xmobar -x 0 $HOME/.config/xmobar/doom-one-xmobarrc"
       -- the xmonad, ya know...what the WM is named after!
       xmonad $ ewmh def
	   { manageHook         = myManageHook <+> manageDocks
	   , handleEventHook    = docksEventHook
				  -- Uncomment this line to enable fullscreen support on things like YouTube/Netflix.
				  -- This works perfect on SINGLE monitor systems. On multi-monitor systems,
				  -- it adds a border around the window if screen does not have focus. So, my solution
				  -- is to use a keybinding to toggle fullscreen noborders instead.  (M-<Space>)
				  -- <+> fullscreenEventHook
	   , modMask            = myModMask
	   , terminal           = myTerminal
	   , startupHook        = myStartupHook
	   , layoutHook         = showWName' myShowWNameTheme $ myLayoutHook
	   , workspaces         = myWorkspaces
	   , borderWidth        = myBorderWidth
	   , normalBorderColor  = myNormColor
	   , focusedBorderColor = myFocusColor
	   , logHook = dynamicLogWithPP $ namedScratchpadFilterOutWorkspacePP $ xmobarPP
		 -- the following variables beginning with 'pp' are settings for xmobar.
		 { ppOutput = \x -> hPutStrLn xmproc0 x                          -- xmobar on monitor 1
		 , ppCurrent = xmobarColor "#c792ea" "" . wrap "<box type=Bottom width=2 mb=2 color=#c792ea>" "</box>"         -- Current workspace
		 , ppVisible = xmobarColor "#c792ea" "" . clickable              -- Visible but not current workspace
		 , ppHidden = xmobarColor "#82AAFF" "" . wrap "<box type=Top width=2 mt=2 color=#82AAFF>" "</box>" . clickable -- Hidden workspaces
		 , ppHiddenNoWindows = xmobarColor "#82AAFF" ""  . clickable     -- Hidden workspaces (no windows)
		 , ppTitle = xmobarColor "#b3afc2" "" . shorten 60               -- Title of active window
		 , ppSep =  "<fc=#666666> <fn=1>|</fn> </fc>"                    -- Separator character
		 , ppUrgent = xmobarColor "#C45500" "" . wrap "!" "!"            -- Urgent workspace
		 , ppExtras  = [windowCount]                                     -- # of windows current workspace
		 , ppOrder  = \(ws:l:t:ex) -> [ws,l]++ex++[t]                    -- order of things in xmobar
		 }
	   } `additionalKeysP` myKeys

 #+END_SRC
** xmobarrc
   The panel I had used with Xmonad.
#+BEGIN_SRC fundamental
-- Xmobar (http://projects.haskell.org/xmobar/)
-- This is one of the xmobar configurations for DTOS.
-- This config is packaged in the DTOS repo as 'dtos-xmobar'
-- Color scheme: Doom One
-- Dependencies: 
   -- otf-font-awesome 
   -- ttf-mononoki 
   -- ttf-ubuntu-font-family
   -- htop
   -- emacs
   -- pacman (Arch Linux)
   -- trayer
   -- 'dtos-local-bin' (from dtos-core-repo)

Config { font            = "xft:Ubuntu:weight=bold:pixelsize=11:antialias=true:hinting=true"
       , additionalFonts = [ "xft:Mononoki:pixelsize=11:antialias=true:hinting=true"
                           , "xft:Font Awesome 5 Free Solid:pixelsize=12"
                           , "xft:Font Awesome 5 Brands:pixelsize=12"
                           ]
       , bgColor      = "#282c34"
       , fgColor      = "#ff6c6b"
       -- Position TopSize and BottomSize take 3 arguments:
       --   an alignment parameter (L/R/C) for Left, Right or Center.
       --   an integer for the percentage width, so 100 would be 100%.
       --   an integer for the minimum pixel height for xmobar, so 24 would force a height of at least 24 pixels.
       --   NOTE: The height should be the same as the trayer (system tray) height.
       , position       = TopSize L 100 24
       , lowerOnStart = True
       , hideOnStart  = False
       , allDesktops  = True
       , persistent   = True
       , iconRoot     = ".xmonad/xpm/"  -- default: "."
       , commands = [
                        -- Echos a "penguin" icon in front of the kernel output.
                      Run Com "echo" ["<fn=3>\xf17c</fn>"] "penguin" 3600
                        -- Get kernel version (script found in .local/bin)
                    , Run Com ".local/bin/kernel" [] "kernel" 36000
                        -- Cpu usage in percent
                    , Run Cpu ["-t", "<fn=2>\xf108</fn>  cpu: (<total>%)","-H","50","--high","red"] 20
                        -- Ram used number and percent
                    , Run Memory ["-t", "<fn=2>\xf233</fn>  mem: <used>M (<usedratio>%)"] 20
                        -- Disk space free
                    , Run DiskU [("/", "<fn=2>\xf0c7</fn>  hdd: <free> free")] [] 60
                        -- Echos an "up arrow" icon in front of the uptime output.
                    , Run Com "echo" ["<fn=2>\xf0aa</fn>"] "uparrow" 3600
                        -- Uptime
                    , Run Uptime ["-t", "uptime: <days>d <hours>h"] 360
                        -- Echos a "bell" icon in front of the pacman updates.
                    , Run Com "echo" ["<fn=2>\xf0f3</fn>"] "bell" 3600
                        -- Check for pacman updates (script found in .local/bin)
                    , Run Com ".local/bin/pacupdate" [] "pacupdate" 36000
                        -- Echos a "battery" icon in front of the pacman updates.
                    , Run Com "echo" ["<fn=2>\xf242</fn>"] "baticon" 3600
                        -- Battery
                    , Run BatteryP ["BAT0"] ["-t", "<acstatus><watts> (<left>%)"] 360
                        -- Time and date
                    , Run Date "<fn=2>\xf017</fn>  %b %d %Y - (%H:%M) " "date" 50
                        -- Script that dynamically adjusts xmobar padding depending on number of trayer icons.
                    , Run Com ".config/xmobar/trayer-padding-icon.sh" [] "trayerpad" 20
                        -- Prints out the left side items such as workspaces, layout, etc.
                    , Run UnsafeStdinReader
                    ]
       , sepChar = "%"
       , alignSep = "}{"
       , template = " <icon=haskell_20.xpm/>   <fc=#666666>|</fc> %UnsafeStdinReader% }{ <box type=Bottom width=2 mb=2 color=#51afef><fc=#51afef>%penguin%  <action=`alacritty -e htop`>%kernel%</action> </fc></box>    <box type=Bottom width=2 mb=2 color=#ecbe7b><fc=#ecbe7b><action=`alacritty -e htop`>%cpu%</action></fc></box>    <box type=Bottom width=2 mb=2 color=#ff6c6b><fc=#ff6c6b><action=`alacritty -e htop`>%memory%</action></fc></box>    <box type=Bottom width=2 mb=2 color=#a9a1e1><fc=#a9a1e1><action=`alacritty -e htop`>%disku%</action></fc></box>    <box type=Bottom width=2 mb=2 color=#98be65><fc=#98be65>%uparrow%  <action=`alacritty -e htop`>%uptime%</action></fc></box>    <box type=Bottom width=2 mb=2 color=#c678dd><fc=#c678dd>%bell%  <action=`alacritty -e sudo pacman -Syu`>%pacupdate%</action></fc></box>   <box type=Bottom width=2 mb=2 color=#46d9ff><fc=#46d9ff><action=`emacsclient -c -a 'emacs' --eval '(doom/window-maximize-buffer(dt/year-calendar))'`>%date%</action></fc></box> %trayerpad%"
       }
#+END_SRC 

  )

    (poly/polybar-exwm-workspace)

#+END_SRC
** Polybar Panel
#+BEGIN_SRC elisp
  (defun poly/polybar-exwm-workspace ()
    (pcase exwm-workspace-current-index
      (0 "Dashboard")
      (1 "Terminal")
      (2 "Web Browser")
      (3 "Videos")
      (4 "Documentation")
      (5 "Development")
      (6 "Blender")
      (7 "Chat")
      (8 "Mu4e")
      (9 "Mocp")))

#+END_SRC
